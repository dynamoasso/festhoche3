{"version":3,"file":"js/300.ed4dec30.js","mappings":"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","sources":["webpack://festhoche3-gallery/./node_modules/photoswipe/dist/photoswipe.esm.js"],"sourcesContent":["/*!\n  * PhotoSwipe 5.4.4 - https://photoswipe.com\n  * (c) 2024 Dmytro Semenov\n  */\n/** @typedef {import('../photoswipe.js').Point} Point */\n\n/**\r\n * @template {keyof HTMLElementTagNameMap} T\r\n * @param {string} className\r\n * @param {T} tagName\r\n * @param {Node} [appendToEl]\r\n * @returns {HTMLElementTagNameMap[T]}\r\n */\nfunction createElement(className, tagName, appendToEl) {\n  const el = document.createElement(tagName);\n\n  if (className) {\n    el.className = className;\n  }\n\n  if (appendToEl) {\n    appendToEl.appendChild(el);\n  }\n\n  return el;\n}\n/**\r\n * @param {Point} p1\r\n * @param {Point} p2\r\n * @returns {Point}\r\n */\n\nfunction equalizePoints(p1, p2) {\n  p1.x = p2.x;\n  p1.y = p2.y;\n\n  if (p2.id !== undefined) {\n    p1.id = p2.id;\n  }\n\n  return p1;\n}\n/**\r\n * @param {Point} p\r\n */\n\nfunction roundPoint(p) {\n  p.x = Math.round(p.x);\n  p.y = Math.round(p.y);\n}\n/**\r\n * Returns distance between two points.\r\n *\r\n * @param {Point} p1\r\n * @param {Point} p2\r\n * @returns {number}\r\n */\n\nfunction getDistanceBetween(p1, p2) {\n  const x = Math.abs(p1.x - p2.x);\n  const y = Math.abs(p1.y - p2.y);\n  return Math.sqrt(x * x + y * y);\n}\n/**\r\n * Whether X and Y positions of points are equal\r\n *\r\n * @param {Point} p1\r\n * @param {Point} p2\r\n * @returns {boolean}\r\n */\n\nfunction pointsEqual(p1, p2) {\n  return p1.x === p2.x && p1.y === p2.y;\n}\n/**\r\n * The float result between the min and max values.\r\n *\r\n * @param {number} val\r\n * @param {number} min\r\n * @param {number} max\r\n * @returns {number}\r\n */\n\nfunction clamp(val, min, max) {\n  return Math.min(Math.max(val, min), max);\n}\n/**\r\n * Get transform string\r\n *\r\n * @param {number} x\r\n * @param {number} [y]\r\n * @param {number} [scale]\r\n * @returns {string}\r\n */\n\nfunction toTransformString(x, y, scale) {\n  let propValue = `translate3d(${x}px,${y || 0}px,0)`;\n\n  if (scale !== undefined) {\n    propValue += ` scale3d(${scale},${scale},1)`;\n  }\n\n  return propValue;\n}\n/**\r\n * Apply transform:translate(x, y) scale(scale) to element\r\n *\r\n * @param {HTMLElement} el\r\n * @param {number} x\r\n * @param {number} [y]\r\n * @param {number} [scale]\r\n */\n\nfunction setTransform(el, x, y, scale) {\n  el.style.transform = toTransformString(x, y, scale);\n}\nconst defaultCSSEasing = 'cubic-bezier(.4,0,.22,1)';\n/**\r\n * Apply CSS transition to element\r\n *\r\n * @param {HTMLElement} el\r\n * @param {string} [prop] CSS property to animate\r\n * @param {number} [duration] in ms\r\n * @param {string} [ease] CSS easing function\r\n */\n\nfunction setTransitionStyle(el, prop, duration, ease) {\n  // inOut: 'cubic-bezier(.4, 0, .22, 1)', // for \"toggle state\" transitions\n  // out: 'cubic-bezier(0, 0, .22, 1)', // for \"show\" transitions\n  // in: 'cubic-bezier(.4, 0, 1, 1)'// for \"hide\" transitions\n  el.style.transition = prop ? `${prop} ${duration}ms ${ease || defaultCSSEasing}` : 'none';\n}\n/**\r\n * Apply width and height CSS properties to element\r\n *\r\n * @param {HTMLElement} el\r\n * @param {string | number} w\r\n * @param {string | number} h\r\n */\n\nfunction setWidthHeight(el, w, h) {\n  el.style.width = typeof w === 'number' ? `${w}px` : w;\n  el.style.height = typeof h === 'number' ? `${h}px` : h;\n}\n/**\r\n * @param {HTMLElement} el\r\n */\n\nfunction removeTransitionStyle(el) {\n  setTransitionStyle(el);\n}\n/**\r\n * @param {HTMLImageElement} img\r\n * @returns {Promise<HTMLImageElement | void>}\r\n */\n\nfunction decodeImage(img) {\n  if ('decode' in img) {\n    return img.decode().catch(() => {});\n  }\n\n  if (img.complete) {\n    return Promise.resolve(img);\n  }\n\n  return new Promise((resolve, reject) => {\n    img.onload = () => resolve(img);\n\n    img.onerror = reject;\n  });\n}\n/** @typedef {LOAD_STATE[keyof LOAD_STATE]} LoadState */\n\n/** @type {{ IDLE: 'idle'; LOADING: 'loading'; LOADED: 'loaded'; ERROR: 'error' }} */\n\nconst LOAD_STATE = {\n  IDLE: 'idle',\n  LOADING: 'loading',\n  LOADED: 'loaded',\n  ERROR: 'error'\n};\n/**\r\n * Check if click or keydown event was dispatched\r\n * with a special key or via mouse wheel.\r\n *\r\n * @param {MouseEvent | KeyboardEvent} e\r\n * @returns {boolean}\r\n */\n\nfunction specialKeyUsed(e) {\n  return 'button' in e && e.button === 1 || e.ctrlKey || e.metaKey || e.altKey || e.shiftKey;\n}\n/**\r\n * Parse `gallery` or `children` options.\r\n *\r\n * @param {import('../photoswipe.js').ElementProvider} [option]\r\n * @param {string} [legacySelector]\r\n * @param {HTMLElement | Document} [parent]\r\n * @returns HTMLElement[]\r\n */\n\nfunction getElementsFromOption(option, legacySelector, parent = document) {\n  /** @type {HTMLElement[]} */\n  let elements = [];\n\n  if (option instanceof Element) {\n    elements = [option];\n  } else if (option instanceof NodeList || Array.isArray(option)) {\n    elements = Array.from(option);\n  } else {\n    const selector = typeof option === 'string' ? option : legacySelector;\n\n    if (selector) {\n      elements = Array.from(parent.querySelectorAll(selector));\n    }\n  }\n\n  return elements;\n}\n/**\r\n * Check if browser is Safari\r\n *\r\n * @returns {boolean}\r\n */\n\nfunction isSafari() {\n  return !!(navigator.vendor && navigator.vendor.match(/apple/i));\n}\n\n// Detect passive event listener support\nlet supportsPassive = false;\n/* eslint-disable */\n\ntry {\n  /* @ts-ignore */\n  window.addEventListener('test', null, Object.defineProperty({}, 'passive', {\n    get: () => {\n      supportsPassive = true;\n    }\n  }));\n} catch (e) {}\n/* eslint-enable */\n\n/**\r\n * @typedef {Object} PoolItem\r\n * @prop {HTMLElement | Window | Document | undefined | null} target\r\n * @prop {string} type\r\n * @prop {EventListenerOrEventListenerObject} listener\r\n * @prop {boolean} [passive]\r\n */\n\n\nclass DOMEvents {\n  constructor() {\n    /**\r\n     * @type {PoolItem[]}\r\n     * @private\r\n     */\n    this._pool = [];\n  }\n  /**\r\n   * Adds event listeners\r\n   *\r\n   * @param {PoolItem['target']} target\r\n   * @param {PoolItem['type']} type Can be multiple, separated by space.\r\n   * @param {PoolItem['listener']} listener\r\n   * @param {PoolItem['passive']} [passive]\r\n   */\n\n\n  add(target, type, listener, passive) {\n    this._toggleListener(target, type, listener, passive);\n  }\n  /**\r\n   * Removes event listeners\r\n   *\r\n   * @param {PoolItem['target']} target\r\n   * @param {PoolItem['type']} type\r\n   * @param {PoolItem['listener']} listener\r\n   * @param {PoolItem['passive']} [passive]\r\n   */\n\n\n  remove(target, type, listener, passive) {\n    this._toggleListener(target, type, listener, passive, true);\n  }\n  /**\r\n   * Removes all bound events\r\n   */\n\n\n  removeAll() {\n    this._pool.forEach(poolItem => {\n      this._toggleListener(poolItem.target, poolItem.type, poolItem.listener, poolItem.passive, true, true);\n    });\n\n    this._pool = [];\n  }\n  /**\r\n   * Adds or removes event\r\n   *\r\n   * @private\r\n   * @param {PoolItem['target']} target\r\n   * @param {PoolItem['type']} type\r\n   * @param {PoolItem['listener']} listener\r\n   * @param {PoolItem['passive']} [passive]\r\n   * @param {boolean} [unbind] Whether the event should be added or removed\r\n   * @param {boolean} [skipPool] Whether events pool should be skipped\r\n   */\n\n\n  _toggleListener(target, type, listener, passive, unbind, skipPool) {\n    if (!target) {\n      return;\n    }\n\n    const methodName = unbind ? 'removeEventListener' : 'addEventListener';\n    const types = type.split(' ');\n    types.forEach(eType => {\n      if (eType) {\n        // Events pool is used to easily unbind all events when PhotoSwipe is closed,\n        // so developer doesn't need to do this manually\n        if (!skipPool) {\n          if (unbind) {\n            // Remove from the events pool\n            this._pool = this._pool.filter(poolItem => {\n              return poolItem.type !== eType || poolItem.listener !== listener || poolItem.target !== target;\n            });\n          } else {\n            // Add to the events pool\n            this._pool.push({\n              target,\n              type: eType,\n              listener,\n              passive\n            });\n          }\n        } // most PhotoSwipe events call preventDefault,\n        // and we do not need browser to scroll the page\n\n\n        const eventOptions = supportsPassive ? {\n          passive: passive || false\n        } : false;\n        target[methodName](eType, listener, eventOptions);\n      }\n    });\n  }\n\n}\n\n/** @typedef {import('../photoswipe.js').PhotoSwipeOptions} PhotoSwipeOptions */\n\n/** @typedef {import('../core/base.js').default} PhotoSwipeBase */\n\n/** @typedef {import('../photoswipe.js').Point} Point */\n\n/** @typedef {import('../slide/slide.js').SlideData} SlideData */\n\n/**\r\n * @param {PhotoSwipeOptions} options\r\n * @param {PhotoSwipeBase} pswp\r\n * @returns {Point}\r\n */\nfunction getViewportSize(options, pswp) {\n  if (options.getViewportSizeFn) {\n    const newViewportSize = options.getViewportSizeFn(options, pswp);\n\n    if (newViewportSize) {\n      return newViewportSize;\n    }\n  }\n\n  return {\n    x: document.documentElement.clientWidth,\n    // TODO: height on mobile is very incosistent due to toolbar\n    // find a way to improve this\n    //\n    // document.documentElement.clientHeight - doesn't seem to work well\n    y: window.innerHeight\n  };\n}\n/**\r\n * Parses padding option.\r\n * Supported formats:\r\n *\r\n * // Object\r\n * padding: {\r\n *  top: 0,\r\n *  bottom: 0,\r\n *  left: 0,\r\n *  right: 0\r\n * }\r\n *\r\n * // A function that returns the object\r\n * paddingFn: (viewportSize, itemData, index) => {\r\n *  return {\r\n *    top: 0,\r\n *    bottom: 0,\r\n *    left: 0,\r\n *    right: 0\r\n *  };\r\n * }\r\n *\r\n * // Legacy variant\r\n * paddingLeft: 0,\r\n * paddingRight: 0,\r\n * paddingTop: 0,\r\n * paddingBottom: 0,\r\n *\r\n * @param {'left' | 'top' | 'bottom' | 'right'} prop\r\n * @param {PhotoSwipeOptions} options PhotoSwipe options\r\n * @param {Point} viewportSize PhotoSwipe viewport size, for example: { x:800, y:600 }\r\n * @param {SlideData} itemData Data about the slide\r\n * @param {number} index Slide index\r\n * @returns {number}\r\n */\n\nfunction parsePaddingOption(prop, options, viewportSize, itemData, index) {\n  let paddingValue = 0;\n\n  if (options.paddingFn) {\n    paddingValue = options.paddingFn(viewportSize, itemData, index)[prop];\n  } else if (options.padding) {\n    paddingValue = options.padding[prop];\n  } else {\n    const legacyPropName = 'padding' + prop[0].toUpperCase() + prop.slice(1); // @ts-expect-error\n\n    if (options[legacyPropName]) {\n      // @ts-expect-error\n      paddingValue = options[legacyPropName];\n    }\n  }\n\n  return Number(paddingValue) || 0;\n}\n/**\r\n * @param {PhotoSwipeOptions} options\r\n * @param {Point} viewportSize\r\n * @param {SlideData} itemData\r\n * @param {number} index\r\n * @returns {Point}\r\n */\n\nfunction getPanAreaSize(options, viewportSize, itemData, index) {\n  return {\n    x: viewportSize.x - parsePaddingOption('left', options, viewportSize, itemData, index) - parsePaddingOption('right', options, viewportSize, itemData, index),\n    y: viewportSize.y - parsePaddingOption('top', options, viewportSize, itemData, index) - parsePaddingOption('bottom', options, viewportSize, itemData, index)\n  };\n}\n\n/** @typedef {import('./slide.js').default} Slide */\n\n/** @typedef {Record<Axis, number>} Point */\n\n/** @typedef {'x' | 'y'} Axis */\n\n/**\r\n * Calculates minimum, maximum and initial (center) bounds of a slide\r\n */\n\nclass PanBounds {\n  /**\r\n   * @param {Slide} slide\r\n   */\n  constructor(slide) {\n    this.slide = slide;\n    this.currZoomLevel = 1;\n    this.center =\n    /** @type {Point} */\n    {\n      x: 0,\n      y: 0\n    };\n    this.max =\n    /** @type {Point} */\n    {\n      x: 0,\n      y: 0\n    };\n    this.min =\n    /** @type {Point} */\n    {\n      x: 0,\n      y: 0\n    };\n  }\n  /**\r\n   * _getItemBounds\r\n   *\r\n   * @param {number} currZoomLevel\r\n   */\n\n\n  update(currZoomLevel) {\n    this.currZoomLevel = currZoomLevel;\n\n    if (!this.slide.width) {\n      this.reset();\n    } else {\n      this._updateAxis('x');\n\n      this._updateAxis('y');\n\n      this.slide.pswp.dispatch('calcBounds', {\n        slide: this.slide\n      });\n    }\n  }\n  /**\r\n   * _calculateItemBoundsForAxis\r\n   *\r\n   * @param {Axis} axis\r\n   */\n\n\n  _updateAxis(axis) {\n    const {\n      pswp\n    } = this.slide;\n    const elSize = this.slide[axis === 'x' ? 'width' : 'height'] * this.currZoomLevel;\n    const paddingProp = axis === 'x' ? 'left' : 'top';\n    const padding = parsePaddingOption(paddingProp, pswp.options, pswp.viewportSize, this.slide.data, this.slide.index);\n    const panAreaSize = this.slide.panAreaSize[axis]; // Default position of element.\n    // By default, it is center of viewport:\n\n    this.center[axis] = Math.round((panAreaSize - elSize) / 2) + padding; // maximum pan position\n\n    this.max[axis] = elSize > panAreaSize ? Math.round(panAreaSize - elSize) + padding : this.center[axis]; // minimum pan position\n\n    this.min[axis] = elSize > panAreaSize ? padding : this.center[axis];\n  } // _getZeroBounds\n\n\n  reset() {\n    this.center.x = 0;\n    this.center.y = 0;\n    this.max.x = 0;\n    this.max.y = 0;\n    this.min.x = 0;\n    this.min.y = 0;\n  }\n  /**\r\n   * Correct pan position if it's beyond the bounds\r\n   *\r\n   * @param {Axis} axis x or y\r\n   * @param {number} panOffset\r\n   * @returns {number}\r\n   */\n\n\n  correctPan(axis, panOffset) {\n    // checkPanBounds\n    return clamp(panOffset, this.max[axis], this.min[axis]);\n  }\n\n}\n\nconst MAX_IMAGE_WIDTH = 4000;\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\n\n/** @typedef {import('../photoswipe.js').PhotoSwipeOptions} PhotoSwipeOptions */\n\n/** @typedef {import('../photoswipe.js').Point} Point */\n\n/** @typedef {import('../slide/slide.js').SlideData} SlideData */\n\n/** @typedef {'fit' | 'fill' | number | ((zoomLevelObject: ZoomLevel) => number)} ZoomLevelOption */\n\n/**\r\n * Calculates zoom levels for specific slide.\r\n * Depends on viewport size and image size.\r\n */\n\nclass ZoomLevel {\n  /**\r\n   * @param {PhotoSwipeOptions} options PhotoSwipe options\r\n   * @param {SlideData} itemData Slide data\r\n   * @param {number} index Slide index\r\n   * @param {PhotoSwipe} [pswp] PhotoSwipe instance, can be undefined if not initialized yet\r\n   */\n  constructor(options, itemData, index, pswp) {\n    this.pswp = pswp;\n    this.options = options;\n    this.itemData = itemData;\n    this.index = index;\n    /** @type { Point | null } */\n\n    this.panAreaSize = null;\n    /** @type { Point | null } */\n\n    this.elementSize = null;\n    this.fit = 1;\n    this.fill = 1;\n    this.vFill = 1;\n    this.initial = 1;\n    this.secondary = 1;\n    this.max = 1;\n    this.min = 1;\n  }\n  /**\r\n   * Calculate initial, secondary and maximum zoom level for the specified slide.\r\n   *\r\n   * It should be called when either image or viewport size changes.\r\n   *\r\n   * @param {number} maxWidth\r\n   * @param {number} maxHeight\r\n   * @param {Point} panAreaSize\r\n   */\n\n\n  update(maxWidth, maxHeight, panAreaSize) {\n    /** @type {Point} */\n    const elementSize = {\n      x: maxWidth,\n      y: maxHeight\n    };\n    this.elementSize = elementSize;\n    this.panAreaSize = panAreaSize;\n    const hRatio = panAreaSize.x / elementSize.x;\n    const vRatio = panAreaSize.y / elementSize.y;\n    this.fit = Math.min(1, hRatio < vRatio ? hRatio : vRatio);\n    this.fill = Math.min(1, hRatio > vRatio ? hRatio : vRatio); // zoom.vFill defines zoom level of the image\n    // when it has 100% of viewport vertical space (height)\n\n    this.vFill = Math.min(1, vRatio);\n    this.initial = this._getInitial();\n    this.secondary = this._getSecondary();\n    this.max = Math.max(this.initial, this.secondary, this._getMax());\n    this.min = Math.min(this.fit, this.initial, this.secondary);\n\n    if (this.pswp) {\n      this.pswp.dispatch('zoomLevelsUpdate', {\n        zoomLevels: this,\n        slideData: this.itemData\n      });\n    }\n  }\n  /**\r\n   * Parses user-defined zoom option.\r\n   *\r\n   * @private\r\n   * @param {'initial' | 'secondary' | 'max'} optionPrefix Zoom level option prefix (initial, secondary, max)\r\n   * @returns { number | undefined }\r\n   */\n\n\n  _parseZoomLevelOption(optionPrefix) {\n    const optionName =\n    /** @type {'initialZoomLevel' | 'secondaryZoomLevel' | 'maxZoomLevel'} */\n    optionPrefix + 'ZoomLevel';\n    const optionValue = this.options[optionName];\n\n    if (!optionValue) {\n      return;\n    }\n\n    if (typeof optionValue === 'function') {\n      return optionValue(this);\n    }\n\n    if (optionValue === 'fill') {\n      return this.fill;\n    }\n\n    if (optionValue === 'fit') {\n      return this.fit;\n    }\n\n    return Number(optionValue);\n  }\n  /**\r\n   * Get zoom level to which image will be zoomed after double-tap gesture,\r\n   * or when user clicks on zoom icon,\r\n   * or mouse-click on image itself.\r\n   * If you return 1 image will be zoomed to its original size.\r\n   *\r\n   * @private\r\n   * @return {number}\r\n   */\n\n\n  _getSecondary() {\n    let currZoomLevel = this._parseZoomLevelOption('secondary');\n\n    if (currZoomLevel) {\n      return currZoomLevel;\n    } // 3x of \"fit\" state, but not larger than original\n\n\n    currZoomLevel = Math.min(1, this.fit * 3);\n\n    if (this.elementSize && currZoomLevel * this.elementSize.x > MAX_IMAGE_WIDTH) {\n      currZoomLevel = MAX_IMAGE_WIDTH / this.elementSize.x;\n    }\n\n    return currZoomLevel;\n  }\n  /**\r\n   * Get initial image zoom level.\r\n   *\r\n   * @private\r\n   * @return {number}\r\n   */\n\n\n  _getInitial() {\n    return this._parseZoomLevelOption('initial') || this.fit;\n  }\n  /**\r\n   * Maximum zoom level when user zooms\r\n   * via zoom/pinch gesture,\r\n   * via cmd/ctrl-wheel or via trackpad.\r\n   *\r\n   * @private\r\n   * @return {number}\r\n   */\n\n\n  _getMax() {\n    // max zoom level is x4 from \"fit state\",\n    // used for zoom gesture and ctrl/trackpad zoom\n    return this._parseZoomLevelOption('max') || Math.max(1, this.fit * 4);\n  }\n\n}\n\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\n/**\r\n * Renders and allows to control a single slide\r\n */\n\nclass Slide {\n  /**\r\n   * @param {SlideData} data\r\n   * @param {number} index\r\n   * @param {PhotoSwipe} pswp\r\n   */\n  constructor(data, index, pswp) {\n    this.data = data;\n    this.index = index;\n    this.pswp = pswp;\n    this.isActive = index === pswp.currIndex;\n    this.currentResolution = 0;\n    /** @type {Point} */\n\n    this.panAreaSize = {\n      x: 0,\n      y: 0\n    };\n    /** @type {Point} */\n\n    this.pan = {\n      x: 0,\n      y: 0\n    };\n    this.isFirstSlide = this.isActive && !pswp.opener.isOpen;\n    this.zoomLevels = new ZoomLevel(pswp.options, data, index, pswp);\n    this.pswp.dispatch('gettingData', {\n      slide: this,\n      data: this.data,\n      index\n    });\n    this.content = this.pswp.contentLoader.getContentBySlide(this);\n    this.container = createElement('pswp__zoom-wrap', 'div');\n    /** @type {HTMLElement | null} */\n\n    this.holderElement = null;\n    this.currZoomLevel = 1;\n    /** @type {number} */\n\n    this.width = this.content.width;\n    /** @type {number} */\n\n    this.height = this.content.height;\n    this.heavyAppended = false;\n    this.bounds = new PanBounds(this);\n    this.prevDisplayedWidth = -1;\n    this.prevDisplayedHeight = -1;\n    this.pswp.dispatch('slideInit', {\n      slide: this\n    });\n  }\n  /**\r\n   * If this slide is active/current/visible\r\n   *\r\n   * @param {boolean} isActive\r\n   */\n\n\n  setIsActive(isActive) {\n    if (isActive && !this.isActive) {\n      // slide just became active\n      this.activate();\n    } else if (!isActive && this.isActive) {\n      // slide just became non-active\n      this.deactivate();\n    }\n  }\n  /**\r\n   * Appends slide content to DOM\r\n   *\r\n   * @param {HTMLElement} holderElement\r\n   */\n\n\n  append(holderElement) {\n    this.holderElement = holderElement;\n    this.container.style.transformOrigin = '0 0'; // Slide appended to DOM\n\n    if (!this.data) {\n      return;\n    }\n\n    this.calculateSize();\n    this.load();\n    this.updateContentSize();\n    this.appendHeavy();\n    this.holderElement.appendChild(this.container);\n    this.zoomAndPanToInitial();\n    this.pswp.dispatch('firstZoomPan', {\n      slide: this\n    });\n    this.applyCurrentZoomPan();\n    this.pswp.dispatch('afterSetContent', {\n      slide: this\n    });\n\n    if (this.isActive) {\n      this.activate();\n    }\n  }\n\n  load() {\n    this.content.load(false);\n    this.pswp.dispatch('slideLoad', {\n      slide: this\n    });\n  }\n  /**\r\n   * Append \"heavy\" DOM elements\r\n   *\r\n   * This may depend on a type of slide,\r\n   * but generally these are large images.\r\n   */\n\n\n  appendHeavy() {\n    const {\n      pswp\n    } = this;\n    const appendHeavyNearby = true; // todo\n    // Avoid appending heavy elements during animations\n\n    if (this.heavyAppended || !pswp.opener.isOpen || pswp.mainScroll.isShifted() || !this.isActive && !appendHeavyNearby) {\n      return;\n    }\n\n    if (this.pswp.dispatch('appendHeavy', {\n      slide: this\n    }).defaultPrevented) {\n      return;\n    }\n\n    this.heavyAppended = true;\n    this.content.append();\n    this.pswp.dispatch('appendHeavyContent', {\n      slide: this\n    });\n  }\n  /**\r\n   * Triggered when this slide is active (selected).\r\n   *\r\n   * If it's part of opening/closing transition -\r\n   * activate() will trigger after the transition is ended.\r\n   */\n\n\n  activate() {\n    this.isActive = true;\n    this.appendHeavy();\n    this.content.activate();\n    this.pswp.dispatch('slideActivate', {\n      slide: this\n    });\n  }\n  /**\r\n   * Triggered when this slide becomes inactive.\r\n   *\r\n   * Slide can become inactive only after it was active.\r\n   */\n\n\n  deactivate() {\n    this.isActive = false;\n    this.content.deactivate();\n\n    if (this.currZoomLevel !== this.zoomLevels.initial) {\n      // allow filtering\n      this.calculateSize();\n    } // reset zoom level\n\n\n    this.currentResolution = 0;\n    this.zoomAndPanToInitial();\n    this.applyCurrentZoomPan();\n    this.updateContentSize();\n    this.pswp.dispatch('slideDeactivate', {\n      slide: this\n    });\n  }\n  /**\r\n   * The slide should destroy itself, it will never be used again.\r\n   * (unbind all events and destroy internal components)\r\n   */\n\n\n  destroy() {\n    this.content.hasSlide = false;\n    this.content.remove();\n    this.container.remove();\n    this.pswp.dispatch('slideDestroy', {\n      slide: this\n    });\n  }\n\n  resize() {\n    if (this.currZoomLevel === this.zoomLevels.initial || !this.isActive) {\n      // Keep initial zoom level if it was before the resize,\n      // as well as when this slide is not active\n      // Reset position and scale to original state\n      this.calculateSize();\n      this.currentResolution = 0;\n      this.zoomAndPanToInitial();\n      this.applyCurrentZoomPan();\n      this.updateContentSize();\n    } else {\n      // readjust pan position if it's beyond the bounds\n      this.calculateSize();\n      this.bounds.update(this.currZoomLevel);\n      this.panTo(this.pan.x, this.pan.y);\n    }\n  }\n  /**\r\n   * Apply size to current slide content,\r\n   * based on the current resolution and scale.\r\n   *\r\n   * @param {boolean} [force] if size should be updated even if dimensions weren't changed\r\n   */\n\n\n  updateContentSize(force) {\n    // Use initial zoom level\n    // if resolution is not defined (user didn't zoom yet)\n    const scaleMultiplier = this.currentResolution || this.zoomLevels.initial;\n\n    if (!scaleMultiplier) {\n      return;\n    }\n\n    const width = Math.round(this.width * scaleMultiplier) || this.pswp.viewportSize.x;\n    const height = Math.round(this.height * scaleMultiplier) || this.pswp.viewportSize.y;\n\n    if (!this.sizeChanged(width, height) && !force) {\n      return;\n    }\n\n    this.content.setDisplayedSize(width, height);\n  }\n  /**\r\n   * @param {number} width\r\n   * @param {number} height\r\n   */\n\n\n  sizeChanged(width, height) {\n    if (width !== this.prevDisplayedWidth || height !== this.prevDisplayedHeight) {\n      this.prevDisplayedWidth = width;\n      this.prevDisplayedHeight = height;\n      return true;\n    }\n\n    return false;\n  }\n  /** @returns {HTMLImageElement | HTMLDivElement | null | undefined} */\n\n\n  getPlaceholderElement() {\n    var _this$content$placeho;\n\n    return (_this$content$placeho = this.content.placeholder) === null || _this$content$placeho === void 0 ? void 0 : _this$content$placeho.element;\n  }\n  /**\r\n   * Zoom current slide image to...\r\n   *\r\n   * @param {number} destZoomLevel Destination zoom level.\r\n   * @param {Point} [centerPoint]\r\n   * Transform origin center point, or false if viewport center should be used.\r\n   * @param {number | false} [transitionDuration] Transition duration, may be set to 0.\r\n   * @param {boolean} [ignoreBounds] Minimum and maximum zoom levels will be ignored.\r\n   */\n\n\n  zoomTo(destZoomLevel, centerPoint, transitionDuration, ignoreBounds) {\n    const {\n      pswp\n    } = this;\n\n    if (!this.isZoomable() || pswp.mainScroll.isShifted()) {\n      return;\n    }\n\n    pswp.dispatch('beforeZoomTo', {\n      destZoomLevel,\n      centerPoint,\n      transitionDuration\n    }); // stop all pan and zoom transitions\n\n    pswp.animations.stopAllPan(); // if (!centerPoint) {\n    //   centerPoint = pswp.getViewportCenterPoint();\n    // }\n\n    const prevZoomLevel = this.currZoomLevel;\n\n    if (!ignoreBounds) {\n      destZoomLevel = clamp(destZoomLevel, this.zoomLevels.min, this.zoomLevels.max);\n    } // if (transitionDuration === undefined) {\n    //   transitionDuration = this.pswp.options.zoomAnimationDuration;\n    // }\n\n\n    this.setZoomLevel(destZoomLevel);\n    this.pan.x = this.calculateZoomToPanOffset('x', centerPoint, prevZoomLevel);\n    this.pan.y = this.calculateZoomToPanOffset('y', centerPoint, prevZoomLevel);\n    roundPoint(this.pan);\n\n    const finishTransition = () => {\n      this._setResolution(destZoomLevel);\n\n      this.applyCurrentZoomPan();\n    };\n\n    if (!transitionDuration) {\n      finishTransition();\n    } else {\n      pswp.animations.startTransition({\n        isPan: true,\n        name: 'zoomTo',\n        target: this.container,\n        transform: this.getCurrentTransform(),\n        onComplete: finishTransition,\n        duration: transitionDuration,\n        easing: pswp.options.easing\n      });\n    }\n  }\n  /**\r\n   * @param {Point} [centerPoint]\r\n   */\n\n\n  toggleZoom(centerPoint) {\n    this.zoomTo(this.currZoomLevel === this.zoomLevels.initial ? this.zoomLevels.secondary : this.zoomLevels.initial, centerPoint, this.pswp.options.zoomAnimationDuration);\n  }\n  /**\r\n   * Updates zoom level property and recalculates new pan bounds,\r\n   * unlike zoomTo it does not apply transform (use applyCurrentZoomPan)\r\n   *\r\n   * @param {number} currZoomLevel\r\n   */\n\n\n  setZoomLevel(currZoomLevel) {\n    this.currZoomLevel = currZoomLevel;\n    this.bounds.update(this.currZoomLevel);\n  }\n  /**\r\n   * Get pan position after zoom at a given `point`.\r\n   *\r\n   * Always call setZoomLevel(newZoomLevel) beforehand to recalculate\r\n   * pan bounds according to the new zoom level.\r\n   *\r\n   * @param {'x' | 'y'} axis\r\n   * @param {Point} [point]\r\n   * point based on which zoom is performed, usually refers to the current mouse position,\r\n   * if false - viewport center will be used.\r\n   * @param {number} [prevZoomLevel] Zoom level before new zoom was applied.\r\n   * @returns {number}\r\n   */\n\n\n  calculateZoomToPanOffset(axis, point, prevZoomLevel) {\n    const totalPanDistance = this.bounds.max[axis] - this.bounds.min[axis];\n\n    if (totalPanDistance === 0) {\n      return this.bounds.center[axis];\n    }\n\n    if (!point) {\n      point = this.pswp.getViewportCenterPoint();\n    }\n\n    if (!prevZoomLevel) {\n      prevZoomLevel = this.zoomLevels.initial;\n    }\n\n    const zoomFactor = this.currZoomLevel / prevZoomLevel;\n    return this.bounds.correctPan(axis, (this.pan[axis] - point[axis]) * zoomFactor + point[axis]);\n  }\n  /**\r\n   * Apply pan and keep it within bounds.\r\n   *\r\n   * @param {number} panX\r\n   * @param {number} panY\r\n   */\n\n\n  panTo(panX, panY) {\n    this.pan.x = this.bounds.correctPan('x', panX);\n    this.pan.y = this.bounds.correctPan('y', panY);\n    this.applyCurrentZoomPan();\n  }\n  /**\r\n   * If the slide in the current state can be panned by the user\r\n   * @returns {boolean}\r\n   */\n\n\n  isPannable() {\n    return Boolean(this.width) && this.currZoomLevel > this.zoomLevels.fit;\n  }\n  /**\r\n   * If the slide can be zoomed\r\n   * @returns {boolean}\r\n   */\n\n\n  isZoomable() {\n    return Boolean(this.width) && this.content.isZoomable();\n  }\n  /**\r\n   * Apply transform and scale based on\r\n   * the current pan position (this.pan) and zoom level (this.currZoomLevel)\r\n   */\n\n\n  applyCurrentZoomPan() {\n    this._applyZoomTransform(this.pan.x, this.pan.y, this.currZoomLevel);\n\n    if (this === this.pswp.currSlide) {\n      this.pswp.dispatch('zoomPanUpdate', {\n        slide: this\n      });\n    }\n  }\n\n  zoomAndPanToInitial() {\n    this.currZoomLevel = this.zoomLevels.initial; // pan according to the zoom level\n\n    this.bounds.update(this.currZoomLevel);\n    equalizePoints(this.pan, this.bounds.center);\n    this.pswp.dispatch('initialZoomPan', {\n      slide: this\n    });\n  }\n  /**\r\n   * Set translate and scale based on current resolution\r\n   *\r\n   * @param {number} x\r\n   * @param {number} y\r\n   * @param {number} zoom\r\n   * @private\r\n   */\n\n\n  _applyZoomTransform(x, y, zoom) {\n    zoom /= this.currentResolution || this.zoomLevels.initial;\n    setTransform(this.container, x, y, zoom);\n  }\n\n  calculateSize() {\n    const {\n      pswp\n    } = this;\n    equalizePoints(this.panAreaSize, getPanAreaSize(pswp.options, pswp.viewportSize, this.data, this.index));\n    this.zoomLevels.update(this.width, this.height, this.panAreaSize);\n    pswp.dispatch('calcSlideSize', {\n      slide: this\n    });\n  }\n  /** @returns {string} */\n\n\n  getCurrentTransform() {\n    const scale = this.currZoomLevel / (this.currentResolution || this.zoomLevels.initial);\n    return toTransformString(this.pan.x, this.pan.y, scale);\n  }\n  /**\r\n   * Set resolution and re-render the image.\r\n   *\r\n   * For example, if the real image size is 2000x1500,\r\n   * and resolution is 0.5 - it will be rendered as 1000x750.\r\n   *\r\n   * Image with zoom level 2 and resolution 0.5 is\r\n   * the same as image with zoom level 1 and resolution 1.\r\n   *\r\n   * Used to optimize animations and make\r\n   * sure that browser renders image in the highest quality.\r\n   * Also used by responsive images to load the correct one.\r\n   *\r\n   * @param {number} newResolution\r\n   */\n\n\n  _setResolution(newResolution) {\n    if (newResolution === this.currentResolution) {\n      return;\n    }\n\n    this.currentResolution = newResolution;\n    this.updateContentSize();\n    this.pswp.dispatch('resolutionChanged');\n  }\n\n}\n\n/** @typedef {import('../photoswipe.js').Point} Point */\n\n/** @typedef {import('./gestures.js').default} Gestures */\n\nconst PAN_END_FRICTION = 0.35;\nconst VERTICAL_DRAG_FRICTION = 0.6; // 1 corresponds to the third of viewport height\n\nconst MIN_RATIO_TO_CLOSE = 0.4; // Minimum speed required to navigate\n// to next or previous slide\n\nconst MIN_NEXT_SLIDE_SPEED = 0.5;\n/**\r\n * @param {number} initialVelocity\r\n * @param {number} decelerationRate\r\n * @returns {number}\r\n */\n\nfunction project(initialVelocity, decelerationRate) {\n  return initialVelocity * decelerationRate / (1 - decelerationRate);\n}\n/**\r\n * Handles single pointer dragging\r\n */\n\n\nclass DragHandler {\n  /**\r\n   * @param {Gestures} gestures\r\n   */\n  constructor(gestures) {\n    this.gestures = gestures;\n    this.pswp = gestures.pswp;\n    /** @type {Point} */\n\n    this.startPan = {\n      x: 0,\n      y: 0\n    };\n  }\n\n  start() {\n    if (this.pswp.currSlide) {\n      equalizePoints(this.startPan, this.pswp.currSlide.pan);\n    }\n\n    this.pswp.animations.stopAll();\n  }\n\n  change() {\n    const {\n      p1,\n      prevP1,\n      dragAxis\n    } = this.gestures;\n    const {\n      currSlide\n    } = this.pswp;\n\n    if (dragAxis === 'y' && this.pswp.options.closeOnVerticalDrag && currSlide && currSlide.currZoomLevel <= currSlide.zoomLevels.fit && !this.gestures.isMultitouch) {\n      // Handle vertical drag to close\n      const panY = currSlide.pan.y + (p1.y - prevP1.y);\n\n      if (!this.pswp.dispatch('verticalDrag', {\n        panY\n      }).defaultPrevented) {\n        this._setPanWithFriction('y', panY, VERTICAL_DRAG_FRICTION);\n\n        const bgOpacity = 1 - Math.abs(this._getVerticalDragRatio(currSlide.pan.y));\n        this.pswp.applyBgOpacity(bgOpacity);\n        currSlide.applyCurrentZoomPan();\n      }\n    } else {\n      const mainScrollChanged = this._panOrMoveMainScroll('x');\n\n      if (!mainScrollChanged) {\n        this._panOrMoveMainScroll('y');\n\n        if (currSlide) {\n          roundPoint(currSlide.pan);\n          currSlide.applyCurrentZoomPan();\n        }\n      }\n    }\n  }\n\n  end() {\n    const {\n      velocity\n    } = this.gestures;\n    const {\n      mainScroll,\n      currSlide\n    } = this.pswp;\n    let indexDiff = 0;\n    this.pswp.animations.stopAll(); // Handle main scroll if it's shifted\n\n    if (mainScroll.isShifted()) {\n      // Position of the main scroll relative to the viewport\n      const mainScrollShiftDiff = mainScroll.x - mainScroll.getCurrSlideX(); // Ratio between 0 and 1:\n      // 0 - slide is not visible at all,\n      // 0.5 - half of the slide is visible\n      // 1 - slide is fully visible\n\n      const currentSlideVisibilityRatio = mainScrollShiftDiff / this.pswp.viewportSize.x; // Go next slide.\n      //\n      // - if velocity and its direction is matched,\n      //   and we see at least tiny part of the next slide\n      //\n      // - or if we see less than 50% of the current slide\n      //   and velocity is close to 0\n      //\n\n      if (velocity.x < -MIN_NEXT_SLIDE_SPEED && currentSlideVisibilityRatio < 0 || velocity.x < 0.1 && currentSlideVisibilityRatio < -0.5) {\n        // Go to next slide\n        indexDiff = 1;\n        velocity.x = Math.min(velocity.x, 0);\n      } else if (velocity.x > MIN_NEXT_SLIDE_SPEED && currentSlideVisibilityRatio > 0 || velocity.x > -0.1 && currentSlideVisibilityRatio > 0.5) {\n        // Go to prev slide\n        indexDiff = -1;\n        velocity.x = Math.max(velocity.x, 0);\n      }\n\n      mainScroll.moveIndexBy(indexDiff, true, velocity.x);\n    } // Restore zoom level\n\n\n    if (currSlide && currSlide.currZoomLevel > currSlide.zoomLevels.max || this.gestures.isMultitouch) {\n      this.gestures.zoomLevels.correctZoomPan(true);\n    } else {\n      // we run two animations instead of one,\n      // as each axis has own pan boundaries and thus different spring function\n      // (correctZoomPan does not have this functionality,\n      //  it animates all properties with single timing function)\n      this._finishPanGestureForAxis('x');\n\n      this._finishPanGestureForAxis('y');\n    }\n  }\n  /**\r\n   * @private\r\n   * @param {'x' | 'y'} axis\r\n   */\n\n\n  _finishPanGestureForAxis(axis) {\n    const {\n      velocity\n    } = this.gestures;\n    const {\n      currSlide\n    } = this.pswp;\n\n    if (!currSlide) {\n      return;\n    }\n\n    const {\n      pan,\n      bounds\n    } = currSlide;\n    const panPos = pan[axis];\n    const restoreBgOpacity = this.pswp.bgOpacity < 1 && axis === 'y'; // 0.995 means - scroll view loses 0.5% of its velocity per millisecond\n    // Increasing this number will reduce travel distance\n\n    const decelerationRate = 0.995; // 0.99\n    // Pan position if there is no bounds\n\n    const projectedPosition = panPos + project(velocity[axis], decelerationRate);\n\n    if (restoreBgOpacity) {\n      const vDragRatio = this._getVerticalDragRatio(panPos);\n\n      const projectedVDragRatio = this._getVerticalDragRatio(projectedPosition); // If we are above and moving upwards,\n      // or if we are below and moving downwards\n\n\n      if (vDragRatio < 0 && projectedVDragRatio < -MIN_RATIO_TO_CLOSE || vDragRatio > 0 && projectedVDragRatio > MIN_RATIO_TO_CLOSE) {\n        this.pswp.close();\n        return;\n      }\n    } // Pan position with corrected bounds\n\n\n    const correctedPanPosition = bounds.correctPan(axis, projectedPosition); // Exit if pan position should not be changed\n    // or if speed it too low\n\n    if (panPos === correctedPanPosition) {\n      return;\n    } // Overshoot if the final position is out of pan bounds\n\n\n    const dampingRatio = correctedPanPosition === projectedPosition ? 1 : 0.82;\n    const initialBgOpacity = this.pswp.bgOpacity;\n    const totalPanDist = correctedPanPosition - panPos;\n    this.pswp.animations.startSpring({\n      name: 'panGesture' + axis,\n      isPan: true,\n      start: panPos,\n      end: correctedPanPosition,\n      velocity: velocity[axis],\n      dampingRatio,\n      onUpdate: pos => {\n        // Animate opacity of background relative to Y pan position of an image\n        if (restoreBgOpacity && this.pswp.bgOpacity < 1) {\n          // 0 - start of animation, 1 - end of animation\n          const animationProgressRatio = 1 - (correctedPanPosition - pos) / totalPanDist; // We clamp opacity to keep it between 0 and 1.\n          // As progress ratio can be larger than 1 due to overshoot,\n          // and we do not want to bounce opacity.\n\n          this.pswp.applyBgOpacity(clamp(initialBgOpacity + (1 - initialBgOpacity) * animationProgressRatio, 0, 1));\n        }\n\n        pan[axis] = Math.floor(pos);\n        currSlide.applyCurrentZoomPan();\n      }\n    });\n  }\n  /**\r\n   * Update position of the main scroll,\r\n   * or/and update pan position of the current slide.\r\n   *\r\n   * Should return true if it changes (or can change) main scroll.\r\n   *\r\n   * @private\r\n   * @param {'x' | 'y'} axis\r\n   * @returns {boolean}\r\n   */\n\n\n  _panOrMoveMainScroll(axis) {\n    const {\n      p1,\n      dragAxis,\n      prevP1,\n      isMultitouch\n    } = this.gestures;\n    const {\n      currSlide,\n      mainScroll\n    } = this.pswp;\n    const delta = p1[axis] - prevP1[axis];\n    const newMainScrollX = mainScroll.x + delta;\n\n    if (!delta || !currSlide) {\n      return false;\n    } // Always move main scroll if image can not be panned\n\n\n    if (axis === 'x' && !currSlide.isPannable() && !isMultitouch) {\n      mainScroll.moveTo(newMainScrollX, true);\n      return true; // changed main scroll\n    }\n\n    const {\n      bounds\n    } = currSlide;\n    const newPan = currSlide.pan[axis] + delta;\n\n    if (this.pswp.options.allowPanToNext && dragAxis === 'x' && axis === 'x' && !isMultitouch) {\n      const currSlideMainScrollX = mainScroll.getCurrSlideX(); // Position of the main scroll relative to the viewport\n\n      const mainScrollShiftDiff = mainScroll.x - currSlideMainScrollX;\n      const isLeftToRight = delta > 0;\n      const isRightToLeft = !isLeftToRight;\n\n      if (newPan > bounds.min[axis] && isLeftToRight) {\n        // Panning from left to right, beyond the left edge\n        // Wether the image was at minimum pan position (or less)\n        // when this drag gesture started.\n        // Minimum pan position refers to the left edge of the image.\n        const wasAtMinPanPosition = bounds.min[axis] <= this.startPan[axis];\n\n        if (wasAtMinPanPosition) {\n          mainScroll.moveTo(newMainScrollX, true);\n          return true;\n        } else {\n          this._setPanWithFriction(axis, newPan); //currSlide.pan[axis] = newPan;\n\n        }\n      } else if (newPan < bounds.max[axis] && isRightToLeft) {\n        // Paning from right to left, beyond the right edge\n        // Maximum pan position refers to the right edge of the image.\n        const wasAtMaxPanPosition = this.startPan[axis] <= bounds.max[axis];\n\n        if (wasAtMaxPanPosition) {\n          mainScroll.moveTo(newMainScrollX, true);\n          return true;\n        } else {\n          this._setPanWithFriction(axis, newPan); //currSlide.pan[axis] = newPan;\n\n        }\n      } else {\n        // If main scroll is shifted\n        if (mainScrollShiftDiff !== 0) {\n          // If main scroll is shifted right\n          if (mainScrollShiftDiff > 0\n          /*&& isRightToLeft*/\n          ) {\n            mainScroll.moveTo(Math.max(newMainScrollX, currSlideMainScrollX), true);\n            return true;\n          } else if (mainScrollShiftDiff < 0\n          /*&& isLeftToRight*/\n          ) {\n            // Main scroll is shifted left (Position is less than 0 comparing to the viewport 0)\n            mainScroll.moveTo(Math.min(newMainScrollX, currSlideMainScrollX), true);\n            return true;\n          }\n        } else {\n          // We are within pan bounds, so just pan\n          this._setPanWithFriction(axis, newPan);\n        }\n      }\n    } else {\n      if (axis === 'y') {\n        // Do not pan vertically if main scroll is shifted o\n        if (!mainScroll.isShifted() && bounds.min.y !== bounds.max.y) {\n          this._setPanWithFriction(axis, newPan);\n        }\n      } else {\n        this._setPanWithFriction(axis, newPan);\n      }\n    }\n\n    return false;\n  } // If we move above - the ratio is negative\n  // If we move below the ratio is positive\n\n  /**\r\n   * Relation between pan Y position and third of viewport height.\r\n   *\r\n   * When we are at initial position (center bounds) - the ratio is 0,\r\n   * if position is shifted upwards - the ratio is negative,\r\n   * if position is shifted downwards - the ratio is positive.\r\n   *\r\n   * @private\r\n   * @param {number} panY The current pan Y position.\r\n   * @returns {number}\r\n   */\n\n\n  _getVerticalDragRatio(panY) {\n    var _this$pswp$currSlide$, _this$pswp$currSlide;\n\n    return (panY - ((_this$pswp$currSlide$ = (_this$pswp$currSlide = this.pswp.currSlide) === null || _this$pswp$currSlide === void 0 ? void 0 : _this$pswp$currSlide.bounds.center.y) !== null && _this$pswp$currSlide$ !== void 0 ? _this$pswp$currSlide$ : 0)) / (this.pswp.viewportSize.y / 3);\n  }\n  /**\r\n   * Set pan position of the current slide.\r\n   * Apply friction if the position is beyond the pan bounds,\r\n   * or if custom friction is defined.\r\n   *\r\n   * @private\r\n   * @param {'x' | 'y'} axis\r\n   * @param {number} potentialPan\r\n   * @param {number} [customFriction] (0.1 - 1)\r\n   */\n\n\n  _setPanWithFriction(axis, potentialPan, customFriction) {\n    const {\n      currSlide\n    } = this.pswp;\n\n    if (!currSlide) {\n      return;\n    }\n\n    const {\n      pan,\n      bounds\n    } = currSlide;\n    const correctedPan = bounds.correctPan(axis, potentialPan); // If we are out of pan bounds\n\n    if (correctedPan !== potentialPan || customFriction) {\n      const delta = Math.round(potentialPan - pan[axis]);\n      pan[axis] += delta * (customFriction || PAN_END_FRICTION);\n    } else {\n      pan[axis] = potentialPan;\n    }\n  }\n\n}\n\n/** @typedef {import('../photoswipe.js').Point} Point */\n\n/** @typedef {import('./gestures.js').default} Gestures */\n\nconst UPPER_ZOOM_FRICTION = 0.05;\nconst LOWER_ZOOM_FRICTION = 0.15;\n/**\r\n * Get center point between two points\r\n *\r\n * @param {Point} p\r\n * @param {Point} p1\r\n * @param {Point} p2\r\n * @returns {Point}\r\n */\n\nfunction getZoomPointsCenter(p, p1, p2) {\n  p.x = (p1.x + p2.x) / 2;\n  p.y = (p1.y + p2.y) / 2;\n  return p;\n}\n\nclass ZoomHandler {\n  /**\r\n   * @param {Gestures} gestures\r\n   */\n  constructor(gestures) {\n    this.gestures = gestures;\n    /**\r\n     * @private\r\n     * @type {Point}\r\n     */\n\n    this._startPan = {\n      x: 0,\n      y: 0\n    };\n    /**\r\n     * @private\r\n     * @type {Point}\r\n     */\n\n    this._startZoomPoint = {\n      x: 0,\n      y: 0\n    };\n    /**\r\n     * @private\r\n     * @type {Point}\r\n     */\n\n    this._zoomPoint = {\n      x: 0,\n      y: 0\n    };\n    /** @private */\n\n    this._wasOverFitZoomLevel = false;\n    /** @private */\n\n    this._startZoomLevel = 1;\n  }\n\n  start() {\n    const {\n      currSlide\n    } = this.gestures.pswp;\n\n    if (currSlide) {\n      this._startZoomLevel = currSlide.currZoomLevel;\n      equalizePoints(this._startPan, currSlide.pan);\n    }\n\n    this.gestures.pswp.animations.stopAllPan();\n    this._wasOverFitZoomLevel = false;\n  }\n\n  change() {\n    const {\n      p1,\n      startP1,\n      p2,\n      startP2,\n      pswp\n    } = this.gestures;\n    const {\n      currSlide\n    } = pswp;\n\n    if (!currSlide) {\n      return;\n    }\n\n    const minZoomLevel = currSlide.zoomLevels.min;\n    const maxZoomLevel = currSlide.zoomLevels.max;\n\n    if (!currSlide.isZoomable() || pswp.mainScroll.isShifted()) {\n      return;\n    }\n\n    getZoomPointsCenter(this._startZoomPoint, startP1, startP2);\n    getZoomPointsCenter(this._zoomPoint, p1, p2);\n\n    let currZoomLevel = 1 / getDistanceBetween(startP1, startP2) * getDistanceBetween(p1, p2) * this._startZoomLevel; // slightly over the zoom.fit\n\n\n    if (currZoomLevel > currSlide.zoomLevels.initial + currSlide.zoomLevels.initial / 15) {\n      this._wasOverFitZoomLevel = true;\n    }\n\n    if (currZoomLevel < minZoomLevel) {\n      if (pswp.options.pinchToClose && !this._wasOverFitZoomLevel && this._startZoomLevel <= currSlide.zoomLevels.initial) {\n        // fade out background if zooming out\n        const bgOpacity = 1 - (minZoomLevel - currZoomLevel) / (minZoomLevel / 1.2);\n\n        if (!pswp.dispatch('pinchClose', {\n          bgOpacity\n        }).defaultPrevented) {\n          pswp.applyBgOpacity(bgOpacity);\n        }\n      } else {\n        // Apply the friction if zoom level is below the min\n        currZoomLevel = minZoomLevel - (minZoomLevel - currZoomLevel) * LOWER_ZOOM_FRICTION;\n      }\n    } else if (currZoomLevel > maxZoomLevel) {\n      // Apply the friction if zoom level is above the max\n      currZoomLevel = maxZoomLevel + (currZoomLevel - maxZoomLevel) * UPPER_ZOOM_FRICTION;\n    }\n\n    currSlide.pan.x = this._calculatePanForZoomLevel('x', currZoomLevel);\n    currSlide.pan.y = this._calculatePanForZoomLevel('y', currZoomLevel);\n    currSlide.setZoomLevel(currZoomLevel);\n    currSlide.applyCurrentZoomPan();\n  }\n\n  end() {\n    const {\n      pswp\n    } = this.gestures;\n    const {\n      currSlide\n    } = pswp;\n\n    if ((!currSlide || currSlide.currZoomLevel < currSlide.zoomLevels.initial) && !this._wasOverFitZoomLevel && pswp.options.pinchToClose) {\n      pswp.close();\n    } else {\n      this.correctZoomPan();\n    }\n  }\n  /**\r\n   * @private\r\n   * @param {'x' | 'y'} axis\r\n   * @param {number} currZoomLevel\r\n   * @returns {number}\r\n   */\n\n\n  _calculatePanForZoomLevel(axis, currZoomLevel) {\n    const zoomFactor = currZoomLevel / this._startZoomLevel;\n    return this._zoomPoint[axis] - (this._startZoomPoint[axis] - this._startPan[axis]) * zoomFactor;\n  }\n  /**\r\n   * Correct currZoomLevel and pan if they are\r\n   * beyond minimum or maximum values.\r\n   * With animation.\r\n   *\r\n   * @param {boolean} [ignoreGesture]\r\n   * Wether gesture coordinates should be ignored when calculating destination pan position.\r\n   */\n\n\n  correctZoomPan(ignoreGesture) {\n    const {\n      pswp\n    } = this.gestures;\n    const {\n      currSlide\n    } = pswp;\n\n    if (!(currSlide !== null && currSlide !== void 0 && currSlide.isZoomable())) {\n      return;\n    }\n\n    if (this._zoomPoint.x === 0) {\n      ignoreGesture = true;\n    }\n\n    const prevZoomLevel = currSlide.currZoomLevel;\n    /** @type {number} */\n\n    let destinationZoomLevel;\n    let currZoomLevelNeedsChange = true;\n\n    if (prevZoomLevel < currSlide.zoomLevels.initial) {\n      destinationZoomLevel = currSlide.zoomLevels.initial; // zoom to min\n    } else if (prevZoomLevel > currSlide.zoomLevels.max) {\n      destinationZoomLevel = currSlide.zoomLevels.max; // zoom to max\n    } else {\n      currZoomLevelNeedsChange = false;\n      destinationZoomLevel = prevZoomLevel;\n    }\n\n    const initialBgOpacity = pswp.bgOpacity;\n    const restoreBgOpacity = pswp.bgOpacity < 1;\n    const initialPan = equalizePoints({\n      x: 0,\n      y: 0\n    }, currSlide.pan);\n    let destinationPan = equalizePoints({\n      x: 0,\n      y: 0\n    }, initialPan);\n\n    if (ignoreGesture) {\n      this._zoomPoint.x = 0;\n      this._zoomPoint.y = 0;\n      this._startZoomPoint.x = 0;\n      this._startZoomPoint.y = 0;\n      this._startZoomLevel = prevZoomLevel;\n      equalizePoints(this._startPan, initialPan);\n    }\n\n    if (currZoomLevelNeedsChange) {\n      destinationPan = {\n        x: this._calculatePanForZoomLevel('x', destinationZoomLevel),\n        y: this._calculatePanForZoomLevel('y', destinationZoomLevel)\n      };\n    } // set zoom level, so pan bounds are updated according to it\n\n\n    currSlide.setZoomLevel(destinationZoomLevel);\n    destinationPan = {\n      x: currSlide.bounds.correctPan('x', destinationPan.x),\n      y: currSlide.bounds.correctPan('y', destinationPan.y)\n    }; // return zoom level and its bounds to initial\n\n    currSlide.setZoomLevel(prevZoomLevel);\n    const panNeedsChange = !pointsEqual(destinationPan, initialPan);\n\n    if (!panNeedsChange && !currZoomLevelNeedsChange && !restoreBgOpacity) {\n      // update resolution after gesture\n      currSlide._setResolution(destinationZoomLevel);\n\n      currSlide.applyCurrentZoomPan(); // nothing to animate\n\n      return;\n    }\n\n    pswp.animations.stopAllPan();\n    pswp.animations.startSpring({\n      isPan: true,\n      start: 0,\n      end: 1000,\n      velocity: 0,\n      dampingRatio: 1,\n      naturalFrequency: 40,\n      onUpdate: now => {\n        now /= 1000; // 0 - start, 1 - end\n\n        if (panNeedsChange || currZoomLevelNeedsChange) {\n          if (panNeedsChange) {\n            currSlide.pan.x = initialPan.x + (destinationPan.x - initialPan.x) * now;\n            currSlide.pan.y = initialPan.y + (destinationPan.y - initialPan.y) * now;\n          }\n\n          if (currZoomLevelNeedsChange) {\n            const newZoomLevel = prevZoomLevel + (destinationZoomLevel - prevZoomLevel) * now;\n            currSlide.setZoomLevel(newZoomLevel);\n          }\n\n          currSlide.applyCurrentZoomPan();\n        } // Restore background opacity\n\n\n        if (restoreBgOpacity && pswp.bgOpacity < 1) {\n          // We clamp opacity to keep it between 0 and 1.\n          // As progress ratio can be larger than 1 due to overshoot,\n          // and we do not want to bounce opacity.\n          pswp.applyBgOpacity(clamp(initialBgOpacity + (1 - initialBgOpacity) * now, 0, 1));\n        }\n      },\n      onComplete: () => {\n        // update resolution after transition ends\n        currSlide._setResolution(destinationZoomLevel);\n\n        currSlide.applyCurrentZoomPan();\n      }\n    });\n  }\n\n}\n\n/**\r\n * @template {string} T\r\n * @template {string} P\r\n * @typedef {import('../types.js').AddPostfix<T, P>} AddPostfix<T, P>\r\n */\n\n/** @typedef {import('./gestures.js').default} Gestures */\n\n/** @typedef {import('../photoswipe.js').Point} Point */\n\n/** @typedef {'imageClick' | 'bgClick' | 'tap' | 'doubleTap'} Actions */\n\n/**\r\n * Whether the tap was performed on the main slide\r\n * (rather than controls or caption).\r\n *\r\n * @param {PointerEvent} event\r\n * @returns {boolean}\r\n */\nfunction didTapOnMainContent(event) {\n  return !!\n  /** @type {HTMLElement} */\n  event.target.closest('.pswp__container');\n}\n/**\r\n * Tap, double-tap handler.\r\n */\n\n\nclass TapHandler {\n  /**\r\n   * @param {Gestures} gestures\r\n   */\n  constructor(gestures) {\n    this.gestures = gestures;\n  }\n  /**\r\n   * @param {Point} point\r\n   * @param {PointerEvent} originalEvent\r\n   */\n\n\n  click(point, originalEvent) {\n    const targetClassList =\n    /** @type {HTMLElement} */\n    originalEvent.target.classList;\n    const isImageClick = targetClassList.contains('pswp__img');\n    const isBackgroundClick = targetClassList.contains('pswp__item') || targetClassList.contains('pswp__zoom-wrap');\n\n    if (isImageClick) {\n      this._doClickOrTapAction('imageClick', point, originalEvent);\n    } else if (isBackgroundClick) {\n      this._doClickOrTapAction('bgClick', point, originalEvent);\n    }\n  }\n  /**\r\n   * @param {Point} point\r\n   * @param {PointerEvent} originalEvent\r\n   */\n\n\n  tap(point, originalEvent) {\n    if (didTapOnMainContent(originalEvent)) {\n      this._doClickOrTapAction('tap', point, originalEvent);\n    }\n  }\n  /**\r\n   * @param {Point} point\r\n   * @param {PointerEvent} originalEvent\r\n   */\n\n\n  doubleTap(point, originalEvent) {\n    if (didTapOnMainContent(originalEvent)) {\n      this._doClickOrTapAction('doubleTap', point, originalEvent);\n    }\n  }\n  /**\r\n   * @private\r\n   * @param {Actions} actionName\r\n   * @param {Point} point\r\n   * @param {PointerEvent} originalEvent\r\n   */\n\n\n  _doClickOrTapAction(actionName, point, originalEvent) {\n    var _this$gestures$pswp$e;\n\n    const {\n      pswp\n    } = this.gestures;\n    const {\n      currSlide\n    } = pswp;\n    const actionFullName =\n    /** @type {AddPostfix<Actions, 'Action'>} */\n    actionName + 'Action';\n    const optionValue = pswp.options[actionFullName];\n\n    if (pswp.dispatch(actionFullName, {\n      point,\n      originalEvent\n    }).defaultPrevented) {\n      return;\n    }\n\n    if (typeof optionValue === 'function') {\n      optionValue.call(pswp, point, originalEvent);\n      return;\n    }\n\n    switch (optionValue) {\n      case 'close':\n      case 'next':\n        pswp[optionValue]();\n        break;\n\n      case 'zoom':\n        currSlide === null || currSlide === void 0 || currSlide.toggleZoom(point);\n        break;\n\n      case 'zoom-or-close':\n        // by default click zooms current image,\n        // if it can not be zoomed - gallery will be closed\n        if (currSlide !== null && currSlide !== void 0 && currSlide.isZoomable() && currSlide.zoomLevels.secondary !== currSlide.zoomLevels.initial) {\n          currSlide.toggleZoom(point);\n        } else if (pswp.options.clickToCloseNonZoomable) {\n          pswp.close();\n        }\n\n        break;\n\n      case 'toggle-controls':\n        (_this$gestures$pswp$e = this.gestures.pswp.element) === null || _this$gestures$pswp$e === void 0 || _this$gestures$pswp$e.classList.toggle('pswp--ui-visible'); // if (_controlsVisible) {\n        //   _ui.hideControls();\n        // } else {\n        //   _ui.showControls();\n        // }\n\n        break;\n    }\n  }\n\n}\n\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\n\n/** @typedef {import('../photoswipe.js').Point} Point */\n// How far should user should drag\n// until we can determine that the gesture is swipe and its direction\n\nconst AXIS_SWIPE_HYSTERISIS = 10; //const PAN_END_FRICTION = 0.35;\n\nconst DOUBLE_TAP_DELAY = 300; // ms\n\nconst MIN_TAP_DISTANCE = 25; // px\n\n/**\r\n * Gestures class bind touch, pointer or mouse events\r\n * and emits drag to drag-handler and zoom events zoom-handler.\r\n *\r\n * Drag and zoom events are emited in requestAnimationFrame,\r\n * and only when one of pointers was actually changed.\r\n */\n\nclass Gestures {\n  /**\r\n   * @param {PhotoSwipe} pswp\r\n   */\n  constructor(pswp) {\n    this.pswp = pswp;\n    /** @type {'x' | 'y' | null} */\n\n    this.dragAxis = null; // point objects are defined once and reused\n    // PhotoSwipe keeps track only of two pointers, others are ignored\n\n    /** @type {Point} */\n\n    this.p1 = {\n      x: 0,\n      y: 0\n    }; // the first pressed pointer\n\n    /** @type {Point} */\n\n    this.p2 = {\n      x: 0,\n      y: 0\n    }; // the second pressed pointer\n\n    /** @type {Point} */\n\n    this.prevP1 = {\n      x: 0,\n      y: 0\n    };\n    /** @type {Point} */\n\n    this.prevP2 = {\n      x: 0,\n      y: 0\n    };\n    /** @type {Point} */\n\n    this.startP1 = {\n      x: 0,\n      y: 0\n    };\n    /** @type {Point} */\n\n    this.startP2 = {\n      x: 0,\n      y: 0\n    };\n    /** @type {Point} */\n\n    this.velocity = {\n      x: 0,\n      y: 0\n    };\n    /** @type {Point}\r\n     * @private\r\n     */\n\n    this._lastStartP1 = {\n      x: 0,\n      y: 0\n    };\n    /** @type {Point}\r\n     * @private\r\n     */\n\n    this._intervalP1 = {\n      x: 0,\n      y: 0\n    };\n    /** @private */\n\n    this._numActivePoints = 0;\n    /** @type {Point[]}\r\n     * @private\r\n     */\n\n    this._ongoingPointers = [];\n    /** @private */\n\n    this._touchEventEnabled = 'ontouchstart' in window;\n    /** @private */\n\n    this._pointerEventEnabled = !!window.PointerEvent;\n    this.supportsTouch = this._touchEventEnabled || this._pointerEventEnabled && navigator.maxTouchPoints > 1;\n    /** @private */\n\n    this._numActivePoints = 0;\n    /** @private */\n\n    this._intervalTime = 0;\n    /** @private */\n\n    this._velocityCalculated = false;\n    this.isMultitouch = false;\n    this.isDragging = false;\n    this.isZooming = false;\n    /** @type {number | null} */\n\n    this.raf = null;\n    /** @type {NodeJS.Timeout | null}\r\n     * @private\r\n     */\n\n    this._tapTimer = null;\n\n    if (!this.supportsTouch) {\n      // disable pan to next slide for non-touch devices\n      pswp.options.allowPanToNext = false;\n    }\n\n    this.drag = new DragHandler(this);\n    this.zoomLevels = new ZoomHandler(this);\n    this.tapHandler = new TapHandler(this);\n    pswp.on('bindEvents', () => {\n      pswp.events.add(pswp.scrollWrap, 'click',\n      /** @type EventListener */\n      this._onClick.bind(this));\n\n      if (this._pointerEventEnabled) {\n        this._bindEvents('pointer', 'down', 'up', 'cancel');\n      } else if (this._touchEventEnabled) {\n        this._bindEvents('touch', 'start', 'end', 'cancel'); // In previous versions we also bound mouse event here,\n        // in case device supports both touch and mouse events,\n        // but newer versions of browsers now support PointerEvent.\n        // on iOS10 if you bind touchmove/end after touchstart,\n        // and you don't preventDefault touchstart (which PhotoSwipe does),\n        // preventDefault will have no effect on touchmove and touchend.\n        // Unless you bind it previously.\n\n\n        if (pswp.scrollWrap) {\n          pswp.scrollWrap.ontouchmove = () => {};\n\n          pswp.scrollWrap.ontouchend = () => {};\n        }\n      } else {\n        this._bindEvents('mouse', 'down', 'up');\n      }\n    });\n  }\n  /**\r\n   * @private\r\n   * @param {'mouse' | 'touch' | 'pointer'} pref\r\n   * @param {'down' | 'start'} down\r\n   * @param {'up' | 'end'} up\r\n   * @param {'cancel'} [cancel]\r\n   */\n\n\n  _bindEvents(pref, down, up, cancel) {\n    const {\n      pswp\n    } = this;\n    const {\n      events\n    } = pswp;\n    const cancelEvent = cancel ? pref + cancel : '';\n    events.add(pswp.scrollWrap, pref + down,\n    /** @type EventListener */\n    this.onPointerDown.bind(this));\n    events.add(window, pref + 'move',\n    /** @type EventListener */\n    this.onPointerMove.bind(this));\n    events.add(window, pref + up,\n    /** @type EventListener */\n    this.onPointerUp.bind(this));\n\n    if (cancelEvent) {\n      events.add(pswp.scrollWrap, cancelEvent,\n      /** @type EventListener */\n      this.onPointerUp.bind(this));\n    }\n  }\n  /**\r\n   * @param {PointerEvent} e\r\n   */\n\n\n  onPointerDown(e) {\n    // We do not call preventDefault for touch events\n    // to allow browser to show native dialog on longpress\n    // (the one that allows to save image or open it in new tab).\n    //\n    // Desktop Safari allows to drag images when preventDefault isn't called on mousedown,\n    // even though preventDefault IS called on mousemove. That's why we preventDefault mousedown.\n    const isMousePointer = e.type === 'mousedown' || e.pointerType === 'mouse'; // Allow dragging only via left mouse button.\n    // http://www.quirksmode.org/js/events_properties.html\n    // https://developer.mozilla.org/en-US/docs/Web/API/event.button\n\n    if (isMousePointer && e.button > 0) {\n      return;\n    }\n\n    const {\n      pswp\n    } = this; // if PhotoSwipe is opening or closing\n\n    if (!pswp.opener.isOpen) {\n      e.preventDefault();\n      return;\n    }\n\n    if (pswp.dispatch('pointerDown', {\n      originalEvent: e\n    }).defaultPrevented) {\n      return;\n    }\n\n    if (isMousePointer) {\n      pswp.mouseDetected(); // preventDefault mouse event to prevent\n      // browser image drag feature\n\n      this._preventPointerEventBehaviour(e, 'down');\n    }\n\n    pswp.animations.stopAll();\n\n    this._updatePoints(e, 'down');\n\n    if (this._numActivePoints === 1) {\n      this.dragAxis = null; // we need to store initial point to determine the main axis,\n      // drag is activated only after the axis is determined\n\n      equalizePoints(this.startP1, this.p1);\n    }\n\n    if (this._numActivePoints > 1) {\n      // Tap or double tap should not trigger if more than one pointer\n      this._clearTapTimer();\n\n      this.isMultitouch = true;\n    } else {\n      this.isMultitouch = false;\n    }\n  }\n  /**\r\n   * @param {PointerEvent} e\r\n   */\n\n\n  onPointerMove(e) {\n    this._preventPointerEventBehaviour(e, 'move');\n\n    if (!this._numActivePoints) {\n      return;\n    }\n\n    this._updatePoints(e, 'move');\n\n    if (this.pswp.dispatch('pointerMove', {\n      originalEvent: e\n    }).defaultPrevented) {\n      return;\n    }\n\n    if (this._numActivePoints === 1 && !this.isDragging) {\n      if (!this.dragAxis) {\n        this._calculateDragDirection();\n      } // Drag axis was detected, emit drag.start\n\n\n      if (this.dragAxis && !this.isDragging) {\n        if (this.isZooming) {\n          this.isZooming = false;\n          this.zoomLevels.end();\n        }\n\n        this.isDragging = true;\n\n        this._clearTapTimer(); // Tap can not trigger after drag\n        // Adjust starting point\n\n\n        this._updateStartPoints();\n\n        this._intervalTime = Date.now(); //this._startTime = this._intervalTime;\n\n        this._velocityCalculated = false;\n        equalizePoints(this._intervalP1, this.p1);\n        this.velocity.x = 0;\n        this.velocity.y = 0;\n        this.drag.start();\n\n        this._rafStopLoop();\n\n        this._rafRenderLoop();\n      }\n    } else if (this._numActivePoints > 1 && !this.isZooming) {\n      this._finishDrag();\n\n      this.isZooming = true; // Adjust starting points\n\n      this._updateStartPoints();\n\n      this.zoomLevels.start();\n\n      this._rafStopLoop();\n\n      this._rafRenderLoop();\n    }\n  }\n  /**\r\n   * @private\r\n   */\n\n\n  _finishDrag() {\n    if (this.isDragging) {\n      this.isDragging = false; // Try to calculate velocity,\n      // if it wasn't calculated yet in drag.change\n\n      if (!this._velocityCalculated) {\n        this._updateVelocity(true);\n      }\n\n      this.drag.end();\n      this.dragAxis = null;\n    }\n  }\n  /**\r\n   * @param {PointerEvent} e\r\n   */\n\n\n  onPointerUp(e) {\n    if (!this._numActivePoints) {\n      return;\n    }\n\n    this._updatePoints(e, 'up');\n\n    if (this.pswp.dispatch('pointerUp', {\n      originalEvent: e\n    }).defaultPrevented) {\n      return;\n    }\n\n    if (this._numActivePoints === 0) {\n      this._rafStopLoop();\n\n      if (this.isDragging) {\n        this._finishDrag();\n      } else if (!this.isZooming && !this.isMultitouch) {\n        //this.zoomLevels.correctZoomPan();\n        this._finishTap(e);\n      }\n    }\n\n    if (this._numActivePoints < 2 && this.isZooming) {\n      this.isZooming = false;\n      this.zoomLevels.end();\n\n      if (this._numActivePoints === 1) {\n        // Since we have 1 point left, we need to reinitiate drag\n        this.dragAxis = null;\n\n        this._updateStartPoints();\n      }\n    }\n  }\n  /**\r\n   * @private\r\n   */\n\n\n  _rafRenderLoop() {\n    if (this.isDragging || this.isZooming) {\n      this._updateVelocity();\n\n      if (this.isDragging) {\n        // make sure that pointer moved since the last update\n        if (!pointsEqual(this.p1, this.prevP1)) {\n          this.drag.change();\n        }\n      } else\n        /* if (this.isZooming) */\n        {\n          if (!pointsEqual(this.p1, this.prevP1) || !pointsEqual(this.p2, this.prevP2)) {\n            this.zoomLevels.change();\n          }\n        }\n\n      this._updatePrevPoints();\n\n      this.raf = requestAnimationFrame(this._rafRenderLoop.bind(this));\n    }\n  }\n  /**\r\n   * Update velocity at 50ms interval\r\n   *\r\n   * @private\r\n   * @param {boolean} [force]\r\n   */\n\n\n  _updateVelocity(force) {\n    const time = Date.now();\n    const duration = time - this._intervalTime;\n\n    if (duration < 50 && !force) {\n      return;\n    }\n\n    this.velocity.x = this._getVelocity('x', duration);\n    this.velocity.y = this._getVelocity('y', duration);\n    this._intervalTime = time;\n    equalizePoints(this._intervalP1, this.p1);\n    this._velocityCalculated = true;\n  }\n  /**\r\n   * @private\r\n   * @param {PointerEvent} e\r\n   */\n\n\n  _finishTap(e) {\n    const {\n      mainScroll\n    } = this.pswp; // Do not trigger tap events if main scroll is shifted\n\n    if (mainScroll.isShifted()) {\n      // restore main scroll position\n      // (usually happens if stopped in the middle of animation)\n      mainScroll.moveIndexBy(0, true);\n      return;\n    } // Do not trigger tap for touchcancel or pointercancel\n\n\n    if (e.type.indexOf('cancel') > 0) {\n      return;\n    } // Trigger click instead of tap for mouse events\n\n\n    if (e.type === 'mouseup' || e.pointerType === 'mouse') {\n      this.tapHandler.click(this.startP1, e);\n      return;\n    } // Disable delay if there is no doubleTapAction\n\n\n    const tapDelay = this.pswp.options.doubleTapAction ? DOUBLE_TAP_DELAY : 0; // If tapTimer is defined - we tapped recently,\n    // check if the current tap is close to the previous one,\n    // if yes - trigger double tap\n\n    if (this._tapTimer) {\n      this._clearTapTimer(); // Check if two taps were more or less on the same place\n\n\n      if (getDistanceBetween(this._lastStartP1, this.startP1) < MIN_TAP_DISTANCE) {\n        this.tapHandler.doubleTap(this.startP1, e);\n      }\n    } else {\n      equalizePoints(this._lastStartP1, this.startP1);\n      this._tapTimer = setTimeout(() => {\n        this.tapHandler.tap(this.startP1, e);\n\n        this._clearTapTimer();\n      }, tapDelay);\n    }\n  }\n  /**\r\n   * @private\r\n   */\n\n\n  _clearTapTimer() {\n    if (this._tapTimer) {\n      clearTimeout(this._tapTimer);\n      this._tapTimer = null;\n    }\n  }\n  /**\r\n   * Get velocity for axis\r\n   *\r\n   * @private\r\n   * @param {'x' | 'y'} axis\r\n   * @param {number} duration\r\n   * @returns {number}\r\n   */\n\n\n  _getVelocity(axis, duration) {\n    // displacement is like distance, but can be negative.\n    const displacement = this.p1[axis] - this._intervalP1[axis];\n\n    if (Math.abs(displacement) > 1 && duration > 5) {\n      return displacement / duration;\n    }\n\n    return 0;\n  }\n  /**\r\n   * @private\r\n   */\n\n\n  _rafStopLoop() {\n    if (this.raf) {\n      cancelAnimationFrame(this.raf);\n      this.raf = null;\n    }\n  }\n  /**\r\n   * @private\r\n   * @param {PointerEvent} e\r\n   * @param {'up' | 'down' | 'move'} pointerType Normalized pointer type\r\n   */\n\n\n  _preventPointerEventBehaviour(e, pointerType) {\n    const preventPointerEvent = this.pswp.applyFilters('preventPointerEvent', true, e, pointerType);\n\n    if (preventPointerEvent) {\n      e.preventDefault();\n    }\n  }\n  /**\r\n   * Parses and normalizes points from the touch, mouse or pointer event.\r\n   * Updates p1 and p2.\r\n   *\r\n   * @private\r\n   * @param {PointerEvent | TouchEvent} e\r\n   * @param {'up' | 'down' | 'move'} pointerType Normalized pointer type\r\n   */\n\n\n  _updatePoints(e, pointerType) {\n    if (this._pointerEventEnabled) {\n      const pointerEvent =\n      /** @type {PointerEvent} */\n      e; // Try to find the current pointer in ongoing pointers by its ID\n\n      const pointerIndex = this._ongoingPointers.findIndex(ongoingPointer => {\n        return ongoingPointer.id === pointerEvent.pointerId;\n      });\n\n      if (pointerType === 'up' && pointerIndex > -1) {\n        // release the pointer - remove it from ongoing\n        this._ongoingPointers.splice(pointerIndex, 1);\n      } else if (pointerType === 'down' && pointerIndex === -1) {\n        // add new pointer\n        this._ongoingPointers.push(this._convertEventPosToPoint(pointerEvent, {\n          x: 0,\n          y: 0\n        }));\n      } else if (pointerIndex > -1) {\n        // update existing pointer\n        this._convertEventPosToPoint(pointerEvent, this._ongoingPointers[pointerIndex]);\n      }\n\n      this._numActivePoints = this._ongoingPointers.length; // update points that PhotoSwipe uses\n      // to calculate position and scale\n\n      if (this._numActivePoints > 0) {\n        equalizePoints(this.p1, this._ongoingPointers[0]);\n      }\n\n      if (this._numActivePoints > 1) {\n        equalizePoints(this.p2, this._ongoingPointers[1]);\n      }\n    } else {\n      const touchEvent =\n      /** @type {TouchEvent} */\n      e;\n      this._numActivePoints = 0;\n\n      if (touchEvent.type.indexOf('touch') > -1) {\n        // Touch Event\n        // https://developer.mozilla.org/en-US/docs/Web/API/TouchEvent\n        if (touchEvent.touches && touchEvent.touches.length > 0) {\n          this._convertEventPosToPoint(touchEvent.touches[0], this.p1);\n\n          this._numActivePoints++;\n\n          if (touchEvent.touches.length > 1) {\n            this._convertEventPosToPoint(touchEvent.touches[1], this.p2);\n\n            this._numActivePoints++;\n          }\n        }\n      } else {\n        // Mouse Event\n        this._convertEventPosToPoint(\n        /** @type {PointerEvent} */\n        e, this.p1);\n\n        if (pointerType === 'up') {\n          // clear all points on mouseup\n          this._numActivePoints = 0;\n        } else {\n          this._numActivePoints++;\n        }\n      }\n    }\n  }\n  /** update points that were used during previous rAF tick\r\n   * @private\r\n   */\n\n\n  _updatePrevPoints() {\n    equalizePoints(this.prevP1, this.p1);\n    equalizePoints(this.prevP2, this.p2);\n  }\n  /** update points at the start of gesture\r\n   * @private\r\n   */\n\n\n  _updateStartPoints() {\n    equalizePoints(this.startP1, this.p1);\n    equalizePoints(this.startP2, this.p2);\n\n    this._updatePrevPoints();\n  }\n  /** @private */\n\n\n  _calculateDragDirection() {\n    if (this.pswp.mainScroll.isShifted()) {\n      // if main scroll position is shifted – direction is always horizontal\n      this.dragAxis = 'x';\n    } else {\n      // calculate delta of the last touchmove tick\n      const diff = Math.abs(this.p1.x - this.startP1.x) - Math.abs(this.p1.y - this.startP1.y);\n\n      if (diff !== 0) {\n        // check if pointer was shifted horizontally or vertically\n        const axisToCheck = diff > 0 ? 'x' : 'y';\n\n        if (Math.abs(this.p1[axisToCheck] - this.startP1[axisToCheck]) >= AXIS_SWIPE_HYSTERISIS) {\n          this.dragAxis = axisToCheck;\n        }\n      }\n    }\n  }\n  /**\r\n   * Converts touch, pointer or mouse event\r\n   * to PhotoSwipe point.\r\n   *\r\n   * @private\r\n   * @param {Touch | PointerEvent} e\r\n   * @param {Point} p\r\n   * @returns {Point}\r\n   */\n\n\n  _convertEventPosToPoint(e, p) {\n    p.x = e.pageX - this.pswp.offset.x;\n    p.y = e.pageY - this.pswp.offset.y;\n\n    if ('pointerId' in e) {\n      p.id = e.pointerId;\n    } else if (e.identifier !== undefined) {\n      p.id = e.identifier;\n    }\n\n    return p;\n  }\n  /**\r\n   * @private\r\n   * @param {PointerEvent} e\r\n   */\n\n\n  _onClick(e) {\n    // Do not allow click event to pass through after drag\n    if (this.pswp.mainScroll.isShifted()) {\n      e.preventDefault();\n      e.stopPropagation();\n    }\n  }\n\n}\n\n/** @typedef {import('./photoswipe.js').default} PhotoSwipe */\n\n/** @typedef {import('./slide/slide.js').default} Slide */\n\n/** @typedef {{ el: HTMLDivElement; slide?: Slide }} ItemHolder */\n\nconst MAIN_SCROLL_END_FRICTION = 0.35; // const MIN_SWIPE_TRANSITION_DURATION = 250;\n// const MAX_SWIPE_TRABSITION_DURATION = 500;\n// const DEFAULT_SWIPE_TRANSITION_DURATION = 333;\n\n/**\r\n * Handles movement of the main scrolling container\r\n * (for example, it repositions when user swipes left or right).\r\n *\r\n * Also stores its state.\r\n */\n\nclass MainScroll {\n  /**\r\n   * @param {PhotoSwipe} pswp\r\n   */\n  constructor(pswp) {\n    this.pswp = pswp;\n    this.x = 0;\n    this.slideWidth = 0;\n    /** @private */\n\n    this._currPositionIndex = 0;\n    /** @private */\n\n    this._prevPositionIndex = 0;\n    /** @private */\n\n    this._containerShiftIndex = -1;\n    /** @type {ItemHolder[]} */\n\n    this.itemHolders = [];\n  }\n  /**\r\n   * Position the scroller and slide containers\r\n   * according to viewport size.\r\n   *\r\n   * @param {boolean} [resizeSlides] Whether slides content should resized\r\n   */\n\n\n  resize(resizeSlides) {\n    const {\n      pswp\n    } = this;\n    const newSlideWidth = Math.round(pswp.viewportSize.x + pswp.viewportSize.x * pswp.options.spacing); // Mobile browsers might trigger a resize event during a gesture.\n    // (due to toolbar appearing or hiding).\n    // Avoid re-adjusting main scroll position if width wasn't changed\n\n    const slideWidthChanged = newSlideWidth !== this.slideWidth;\n\n    if (slideWidthChanged) {\n      this.slideWidth = newSlideWidth;\n      this.moveTo(this.getCurrSlideX());\n    }\n\n    this.itemHolders.forEach((itemHolder, index) => {\n      if (slideWidthChanged) {\n        setTransform(itemHolder.el, (index + this._containerShiftIndex) * this.slideWidth);\n      }\n\n      if (resizeSlides && itemHolder.slide) {\n        itemHolder.slide.resize();\n      }\n    });\n  }\n  /**\r\n   * Reset X position of the main scroller to zero\r\n   */\n\n\n  resetPosition() {\n    // Position on the main scroller (offset)\n    // it is independent from slide index\n    this._currPositionIndex = 0;\n    this._prevPositionIndex = 0; // This will force recalculation of size on next resize()\n\n    this.slideWidth = 0; // _containerShiftIndex*viewportSize will give you amount of transform of the current slide\n\n    this._containerShiftIndex = -1;\n  }\n  /**\r\n   * Create and append array of three items\r\n   * that hold data about slides in DOM\r\n   */\n\n\n  appendHolders() {\n    this.itemHolders = []; // append our three slide holders -\n    // previous, current, and next\n\n    for (let i = 0; i < 3; i++) {\n      const el = createElement('pswp__item', 'div', this.pswp.container);\n      el.setAttribute('role', 'group');\n      el.setAttribute('aria-roledescription', 'slide');\n      el.setAttribute('aria-hidden', 'true'); // hide nearby item holders until initial zoom animation finishes (to avoid extra Paints)\n\n      el.style.display = i === 1 ? 'block' : 'none';\n      this.itemHolders.push({\n        el //index: -1\n\n      });\n    }\n  }\n  /**\r\n   * Whether the main scroll can be horizontally swiped to the next or previous slide.\r\n   * @returns {boolean}\r\n   */\n\n\n  canBeSwiped() {\n    return this.pswp.getNumItems() > 1;\n  }\n  /**\r\n   * Move main scroll by X amount of slides.\r\n   * For example:\r\n   *   `-1` will move to the previous slide,\r\n   *    `0` will reset the scroll position of the current slide,\r\n   *    `3` will move three slides forward\r\n   *\r\n   * If loop option is enabled - index will be automatically looped too,\r\n   * (for example `-1` will move to the last slide of the gallery).\r\n   *\r\n   * @param {number} diff\r\n   * @param {boolean} [animate]\r\n   * @param {number} [velocityX]\r\n   * @returns {boolean} whether index was changed or not\r\n   */\n\n\n  moveIndexBy(diff, animate, velocityX) {\n    const {\n      pswp\n    } = this;\n    let newIndex = pswp.potentialIndex + diff;\n    const numSlides = pswp.getNumItems();\n\n    if (pswp.canLoop()) {\n      newIndex = pswp.getLoopedIndex(newIndex);\n      const distance = (diff + numSlides) % numSlides;\n\n      if (distance <= numSlides / 2) {\n        // go forward\n        diff = distance;\n      } else {\n        // go backwards\n        diff = distance - numSlides;\n      }\n    } else {\n      if (newIndex < 0) {\n        newIndex = 0;\n      } else if (newIndex >= numSlides) {\n        newIndex = numSlides - 1;\n      }\n\n      diff = newIndex - pswp.potentialIndex;\n    }\n\n    pswp.potentialIndex = newIndex;\n    this._currPositionIndex -= diff;\n    pswp.animations.stopMainScroll();\n    const destinationX = this.getCurrSlideX();\n\n    if (!animate) {\n      this.moveTo(destinationX);\n      this.updateCurrItem();\n    } else {\n      pswp.animations.startSpring({\n        isMainScroll: true,\n        start: this.x,\n        end: destinationX,\n        velocity: velocityX || 0,\n        naturalFrequency: 30,\n        dampingRatio: 1,\n        //0.7,\n        onUpdate: x => {\n          this.moveTo(x);\n        },\n        onComplete: () => {\n          this.updateCurrItem();\n          pswp.appendHeavy();\n        }\n      });\n      let currDiff = pswp.potentialIndex - pswp.currIndex;\n\n      if (pswp.canLoop()) {\n        const currDistance = (currDiff + numSlides) % numSlides;\n\n        if (currDistance <= numSlides / 2) {\n          // go forward\n          currDiff = currDistance;\n        } else {\n          // go backwards\n          currDiff = currDistance - numSlides;\n        }\n      } // Force-append new slides during transition\n      // if difference between slides is more than 1\n\n\n      if (Math.abs(currDiff) > 1) {\n        this.updateCurrItem();\n      }\n    }\n\n    return Boolean(diff);\n  }\n  /**\r\n   * X position of the main scroll for the current slide\r\n   * (ignores position during dragging)\r\n   * @returns {number}\r\n   */\n\n\n  getCurrSlideX() {\n    return this.slideWidth * this._currPositionIndex;\n  }\n  /**\r\n   * Whether scroll position is shifted.\r\n   * For example, it will return true if the scroll is being dragged or animated.\r\n   * @returns {boolean}\r\n   */\n\n\n  isShifted() {\n    return this.x !== this.getCurrSlideX();\n  }\n  /**\r\n   * Update slides X positions and set their content\r\n   */\n\n\n  updateCurrItem() {\n    var _this$itemHolders$;\n\n    const {\n      pswp\n    } = this;\n    const positionDifference = this._prevPositionIndex - this._currPositionIndex;\n\n    if (!positionDifference) {\n      return;\n    }\n\n    this._prevPositionIndex = this._currPositionIndex;\n    pswp.currIndex = pswp.potentialIndex;\n    let diffAbs = Math.abs(positionDifference);\n    /** @type {ItemHolder | undefined} */\n\n    let tempHolder;\n\n    if (diffAbs >= 3) {\n      this._containerShiftIndex += positionDifference + (positionDifference > 0 ? -3 : 3);\n      diffAbs = 3; // If slides are changed by 3 screens or more - clean up previous slides\n\n      this.itemHolders.forEach(itemHolder => {\n        var _itemHolder$slide;\n\n        (_itemHolder$slide = itemHolder.slide) === null || _itemHolder$slide === void 0 || _itemHolder$slide.destroy();\n        itemHolder.slide = undefined;\n      });\n    }\n\n    for (let i = 0; i < diffAbs; i++) {\n      if (positionDifference > 0) {\n        tempHolder = this.itemHolders.shift();\n\n        if (tempHolder) {\n          this.itemHolders[2] = tempHolder; // move first to last\n\n          this._containerShiftIndex++;\n          setTransform(tempHolder.el, (this._containerShiftIndex + 2) * this.slideWidth);\n          pswp.setContent(tempHolder, pswp.currIndex - diffAbs + i + 2);\n        }\n      } else {\n        tempHolder = this.itemHolders.pop();\n\n        if (tempHolder) {\n          this.itemHolders.unshift(tempHolder); // move last to first\n\n          this._containerShiftIndex--;\n          setTransform(tempHolder.el, this._containerShiftIndex * this.slideWidth);\n          pswp.setContent(tempHolder, pswp.currIndex + diffAbs - i - 2);\n        }\n      }\n    } // Reset transfrom every 50ish navigations in one direction.\n    //\n    // Otherwise transform will keep growing indefinitely,\n    // which might cause issues as browsers have a maximum transform limit.\n    // I wasn't able to reach it, but just to be safe.\n    // This should not cause noticable lag.\n\n\n    if (Math.abs(this._containerShiftIndex) > 50 && !this.isShifted()) {\n      this.resetPosition();\n      this.resize();\n    } // Pan transition might be running (and consntantly updating pan position)\n\n\n    pswp.animations.stopAllPan();\n    this.itemHolders.forEach((itemHolder, i) => {\n      if (itemHolder.slide) {\n        // Slide in the 2nd holder is always active\n        itemHolder.slide.setIsActive(i === 1);\n      }\n    });\n    pswp.currSlide = (_this$itemHolders$ = this.itemHolders[1]) === null || _this$itemHolders$ === void 0 ? void 0 : _this$itemHolders$.slide;\n    pswp.contentLoader.updateLazy(positionDifference);\n\n    if (pswp.currSlide) {\n      pswp.currSlide.applyCurrentZoomPan();\n    }\n\n    pswp.dispatch('change');\n  }\n  /**\r\n   * Move the X position of the main scroll container\r\n   *\r\n   * @param {number} x\r\n   * @param {boolean} [dragging]\r\n   */\n\n\n  moveTo(x, dragging) {\n    if (!this.pswp.canLoop() && dragging) {\n      // Apply friction\n      let newSlideIndexOffset = (this.slideWidth * this._currPositionIndex - x) / this.slideWidth;\n      newSlideIndexOffset += this.pswp.currIndex;\n      const delta = Math.round(x - this.x);\n\n      if (newSlideIndexOffset < 0 && delta > 0 || newSlideIndexOffset >= this.pswp.getNumItems() - 1 && delta < 0) {\n        x = this.x + delta * MAIN_SCROLL_END_FRICTION;\n      }\n    }\n\n    this.x = x;\n\n    if (this.pswp.container) {\n      setTransform(this.pswp.container, x);\n    }\n\n    this.pswp.dispatch('moveMainScroll', {\n      x,\n      dragging: dragging !== null && dragging !== void 0 ? dragging : false\n    });\n  }\n\n}\n\n/** @typedef {import('./photoswipe.js').default} PhotoSwipe */\n\n/**\r\n * @template T\r\n * @typedef {import('./types.js').Methods<T>} Methods<T>\r\n */\n\nconst KeyboardKeyCodesMap = {\n  Escape: 27,\n  z: 90,\n  ArrowLeft: 37,\n  ArrowUp: 38,\n  ArrowRight: 39,\n  ArrowDown: 40,\n  Tab: 9\n};\n/**\r\n * @template {keyof KeyboardKeyCodesMap} T\r\n * @param {T} key\r\n * @param {boolean} isKeySupported\r\n * @returns {T | number | undefined}\r\n */\n\nconst getKeyboardEventKey = (key, isKeySupported) => {\n  return isKeySupported ? key : KeyboardKeyCodesMap[key];\n};\n/**\r\n * - Manages keyboard shortcuts.\r\n * - Helps trap focus within photoswipe.\r\n */\n\n\nclass Keyboard {\n  /**\r\n   * @param {PhotoSwipe} pswp\r\n   */\n  constructor(pswp) {\n    this.pswp = pswp;\n    /** @private */\n\n    this._wasFocused = false;\n    pswp.on('bindEvents', () => {\n      if (pswp.options.trapFocus) {\n        // Dialog was likely opened by keyboard if initial point is not defined\n        if (!pswp.options.initialPointerPos) {\n          // focus causes layout,\n          // which causes lag during the animation,\n          // that's why we delay it until the opener transition ends\n          this._focusRoot();\n        }\n\n        pswp.events.add(document, 'focusin',\n        /** @type EventListener */\n        this._onFocusIn.bind(this));\n      }\n\n      pswp.events.add(document, 'keydown',\n      /** @type EventListener */\n      this._onKeyDown.bind(this));\n    });\n    const lastActiveElement =\n    /** @type {HTMLElement} */\n    document.activeElement;\n    pswp.on('destroy', () => {\n      if (pswp.options.returnFocus && lastActiveElement && this._wasFocused) {\n        lastActiveElement.focus();\n      }\n    });\n  }\n  /** @private */\n\n\n  _focusRoot() {\n    if (!this._wasFocused && this.pswp.element) {\n      this.pswp.element.focus();\n      this._wasFocused = true;\n    }\n  }\n  /**\r\n   * @private\r\n   * @param {KeyboardEvent} e\r\n   */\n\n\n  _onKeyDown(e) {\n    const {\n      pswp\n    } = this;\n\n    if (pswp.dispatch('keydown', {\n      originalEvent: e\n    }).defaultPrevented) {\n      return;\n    }\n\n    if (specialKeyUsed(e)) {\n      // don't do anything if special key pressed\n      // to prevent from overriding default browser actions\n      // for example, in Chrome on Mac cmd+arrow-left returns to previous page\n      return;\n    }\n    /** @type {Methods<PhotoSwipe> | undefined} */\n\n\n    let keydownAction;\n    /** @type {'x' | 'y' | undefined} */\n\n    let axis;\n    let isForward = false;\n    const isKeySupported = ('key' in e);\n\n    switch (isKeySupported ? e.key : e.keyCode) {\n      case getKeyboardEventKey('Escape', isKeySupported):\n        if (pswp.options.escKey) {\n          keydownAction = 'close';\n        }\n\n        break;\n\n      case getKeyboardEventKey('z', isKeySupported):\n        keydownAction = 'toggleZoom';\n        break;\n\n      case getKeyboardEventKey('ArrowLeft', isKeySupported):\n        axis = 'x';\n        break;\n\n      case getKeyboardEventKey('ArrowUp', isKeySupported):\n        axis = 'y';\n        break;\n\n      case getKeyboardEventKey('ArrowRight', isKeySupported):\n        axis = 'x';\n        isForward = true;\n        break;\n\n      case getKeyboardEventKey('ArrowDown', isKeySupported):\n        isForward = true;\n        axis = 'y';\n        break;\n\n      case getKeyboardEventKey('Tab', isKeySupported):\n        this._focusRoot();\n\n        break;\n    } // if left/right/top/bottom key\n\n\n    if (axis) {\n      // prevent page scroll\n      e.preventDefault();\n      const {\n        currSlide\n      } = pswp;\n\n      if (pswp.options.arrowKeys && axis === 'x' && pswp.getNumItems() > 1) {\n        keydownAction = isForward ? 'next' : 'prev';\n      } else if (currSlide && currSlide.currZoomLevel > currSlide.zoomLevels.fit) {\n        // up/down arrow keys pan the image vertically\n        // left/right arrow keys pan horizontally.\n        // Unless there is only one image,\n        // or arrowKeys option is disabled\n        currSlide.pan[axis] += isForward ? -80 : 80;\n        currSlide.panTo(currSlide.pan.x, currSlide.pan.y);\n      }\n    }\n\n    if (keydownAction) {\n      e.preventDefault(); // @ts-ignore\n\n      pswp[keydownAction]();\n    }\n  }\n  /**\r\n   * Trap focus inside photoswipe\r\n   *\r\n   * @private\r\n   * @param {FocusEvent} e\r\n   */\n\n\n  _onFocusIn(e) {\n    const {\n      template\n    } = this.pswp;\n\n    if (template && document !== e.target && template !== e.target && !template.contains(\n    /** @type {Node} */\n    e.target)) {\n      // focus root element\n      template.focus();\n    }\n  }\n\n}\n\nconst DEFAULT_EASING = 'cubic-bezier(.4,0,.22,1)';\n/** @typedef {import('./animations.js').SharedAnimationProps} SharedAnimationProps */\n\n/** @typedef {Object} DefaultCssAnimationProps\r\n *\r\n * @prop {HTMLElement} target\r\n * @prop {number} [duration]\r\n * @prop {string} [easing]\r\n * @prop {string} [transform]\r\n * @prop {string} [opacity]\r\n * */\n\n/** @typedef {SharedAnimationProps & DefaultCssAnimationProps} CssAnimationProps */\n\n/**\r\n * Runs CSS transition.\r\n */\n\nclass CSSAnimation {\n  /**\r\n   * onComplete can be unpredictable, be careful about current state\r\n   *\r\n   * @param {CssAnimationProps} props\r\n   */\n  constructor(props) {\n    var _props$prop;\n\n    this.props = props;\n    const {\n      target,\n      onComplete,\n      transform,\n      onFinish = () => {},\n      duration = 333,\n      easing = DEFAULT_EASING\n    } = props;\n    this.onFinish = onFinish; // support only transform and opacity\n\n    const prop = transform ? 'transform' : 'opacity';\n    const propValue = (_props$prop = props[prop]) !== null && _props$prop !== void 0 ? _props$prop : '';\n    /** @private */\n\n    this._target = target;\n    /** @private */\n\n    this._onComplete = onComplete;\n    /** @private */\n\n    this._finished = false;\n    /** @private */\n\n    this._onTransitionEnd = this._onTransitionEnd.bind(this); // Using timeout hack to make sure that animation\n    // starts even if the animated property was changed recently,\n    // otherwise transitionend might not fire or transition won't start.\n    // https://drafts.csswg.org/css-transitions/#starting\n    //\n    // ¯\\_(ツ)_/¯\n\n    /** @private */\n\n    this._helperTimeout = setTimeout(() => {\n      setTransitionStyle(target, prop, duration, easing);\n      this._helperTimeout = setTimeout(() => {\n        target.addEventListener('transitionend', this._onTransitionEnd, false);\n        target.addEventListener('transitioncancel', this._onTransitionEnd, false); // Safari occasionally does not emit transitionend event\n        // if element property was modified during the transition,\n        // which may be caused by resize or third party component,\n        // using timeout as a safety fallback\n\n        this._helperTimeout = setTimeout(() => {\n          this._finalizeAnimation();\n        }, duration + 500);\n        target.style[prop] = propValue;\n      }, 30); // Do not reduce this number\n    }, 0);\n  }\n  /**\r\n   * @private\r\n   * @param {TransitionEvent} e\r\n   */\n\n\n  _onTransitionEnd(e) {\n    if (e.target === this._target) {\n      this._finalizeAnimation();\n    }\n  }\n  /**\r\n   * @private\r\n   */\n\n\n  _finalizeAnimation() {\n    if (!this._finished) {\n      this._finished = true;\n      this.onFinish();\n\n      if (this._onComplete) {\n        this._onComplete();\n      }\n    }\n  } // Destroy is called automatically onFinish\n\n\n  destroy() {\n    if (this._helperTimeout) {\n      clearTimeout(this._helperTimeout);\n    }\n\n    removeTransitionStyle(this._target);\n\n    this._target.removeEventListener('transitionend', this._onTransitionEnd, false);\n\n    this._target.removeEventListener('transitioncancel', this._onTransitionEnd, false);\n\n    if (!this._finished) {\n      this._finalizeAnimation();\n    }\n  }\n\n}\n\nconst DEFAULT_NATURAL_FREQUENCY = 12;\nconst DEFAULT_DAMPING_RATIO = 0.75;\n/**\r\n * Spring easing helper\r\n */\n\nclass SpringEaser {\n  /**\r\n   * @param {number} initialVelocity Initial velocity, px per ms.\r\n   *\r\n   * @param {number} [dampingRatio]\r\n   * Determines how bouncy animation will be.\r\n   * From 0 to 1, 0 - always overshoot, 1 - do not overshoot.\r\n   * \"overshoot\" refers to part of animation that\r\n   * goes beyond the final value.\r\n   *\r\n   * @param {number} [naturalFrequency]\r\n   * Determines how fast animation will slow down.\r\n   * The higher value - the stiffer the transition will be,\r\n   * and the faster it will slow down.\r\n   * Recommended value from 10 to 50\r\n   */\n  constructor(initialVelocity, dampingRatio, naturalFrequency) {\n    this.velocity = initialVelocity * 1000; // convert to \"pixels per second\"\n    // https://en.wikipedia.org/wiki/Damping_ratio\n\n    this._dampingRatio = dampingRatio || DEFAULT_DAMPING_RATIO; // https://en.wikipedia.org/wiki/Natural_frequency\n\n    this._naturalFrequency = naturalFrequency || DEFAULT_NATURAL_FREQUENCY;\n    this._dampedFrequency = this._naturalFrequency;\n\n    if (this._dampingRatio < 1) {\n      this._dampedFrequency *= Math.sqrt(1 - this._dampingRatio * this._dampingRatio);\n    }\n  }\n  /**\r\n   * @param {number} deltaPosition Difference between current and end position of the animation\r\n   * @param {number} deltaTime Frame duration in milliseconds\r\n   *\r\n   * @returns {number} Displacement, relative to the end position.\r\n   */\n\n\n  easeFrame(deltaPosition, deltaTime) {\n    // Inspired by Apple Webkit and Android spring function implementation\n    // https://en.wikipedia.org/wiki/Oscillation\n    // https://en.wikipedia.org/wiki/Damping_ratio\n    // we ignore mass (assume that it's 1kg)\n    let displacement = 0;\n    let coeff;\n    deltaTime /= 1000;\n    const naturalDumpingPow = Math.E ** (-this._dampingRatio * this._naturalFrequency * deltaTime);\n\n    if (this._dampingRatio === 1) {\n      coeff = this.velocity + this._naturalFrequency * deltaPosition;\n      displacement = (deltaPosition + coeff * deltaTime) * naturalDumpingPow;\n      this.velocity = displacement * -this._naturalFrequency + coeff * naturalDumpingPow;\n    } else if (this._dampingRatio < 1) {\n      coeff = 1 / this._dampedFrequency * (this._dampingRatio * this._naturalFrequency * deltaPosition + this.velocity);\n      const dumpedFCos = Math.cos(this._dampedFrequency * deltaTime);\n      const dumpedFSin = Math.sin(this._dampedFrequency * deltaTime);\n      displacement = naturalDumpingPow * (deltaPosition * dumpedFCos + coeff * dumpedFSin);\n      this.velocity = displacement * -this._naturalFrequency * this._dampingRatio + naturalDumpingPow * (-this._dampedFrequency * deltaPosition * dumpedFSin + this._dampedFrequency * coeff * dumpedFCos);\n    } // Overdamped (>1) damping ratio is not supported\n\n\n    return displacement;\n  }\n\n}\n\n/** @typedef {import('./animations.js').SharedAnimationProps} SharedAnimationProps */\n\n/**\r\n * @typedef {Object} DefaultSpringAnimationProps\r\n *\r\n * @prop {number} start\r\n * @prop {number} end\r\n * @prop {number} velocity\r\n * @prop {number} [dampingRatio]\r\n * @prop {number} [naturalFrequency]\r\n * @prop {(end: number) => void} onUpdate\r\n */\n\n/** @typedef {SharedAnimationProps & DefaultSpringAnimationProps} SpringAnimationProps */\n\nclass SpringAnimation {\n  /**\r\n   * @param {SpringAnimationProps} props\r\n   */\n  constructor(props) {\n    this.props = props;\n    this._raf = 0;\n    const {\n      start,\n      end,\n      velocity,\n      onUpdate,\n      onComplete,\n      onFinish = () => {},\n      dampingRatio,\n      naturalFrequency\n    } = props;\n    this.onFinish = onFinish;\n    const easer = new SpringEaser(velocity, dampingRatio, naturalFrequency);\n    let prevTime = Date.now();\n    let deltaPosition = start - end;\n\n    const animationLoop = () => {\n      if (this._raf) {\n        deltaPosition = easer.easeFrame(deltaPosition, Date.now() - prevTime); // Stop the animation if velocity is low and position is close to end\n\n        if (Math.abs(deltaPosition) < 1 && Math.abs(easer.velocity) < 50) {\n          // Finalize the animation\n          onUpdate(end);\n\n          if (onComplete) {\n            onComplete();\n          }\n\n          this.onFinish();\n        } else {\n          prevTime = Date.now();\n          onUpdate(deltaPosition + end);\n          this._raf = requestAnimationFrame(animationLoop);\n        }\n      }\n    };\n\n    this._raf = requestAnimationFrame(animationLoop);\n  } // Destroy is called automatically onFinish\n\n\n  destroy() {\n    if (this._raf >= 0) {\n      cancelAnimationFrame(this._raf);\n    }\n\n    this._raf = 0;\n  }\n\n}\n\n/** @typedef {import('./css-animation.js').CssAnimationProps} CssAnimationProps */\n\n/** @typedef {import('./spring-animation.js').SpringAnimationProps} SpringAnimationProps */\n\n/** @typedef {Object} SharedAnimationProps\r\n * @prop {string} [name]\r\n * @prop {boolean} [isPan]\r\n * @prop {boolean} [isMainScroll]\r\n * @prop {VoidFunction} [onComplete]\r\n * @prop {VoidFunction} [onFinish]\r\n */\n\n/** @typedef {SpringAnimation | CSSAnimation} Animation */\n\n/** @typedef {SpringAnimationProps | CssAnimationProps} AnimationProps */\n\n/**\r\n * Manages animations\r\n */\n\nclass Animations {\n  constructor() {\n    /** @type {Animation[]} */\n    this.activeAnimations = [];\n  }\n  /**\r\n   * @param {SpringAnimationProps} props\r\n   */\n\n\n  startSpring(props) {\n    this._start(props, true);\n  }\n  /**\r\n   * @param {CssAnimationProps} props\r\n   */\n\n\n  startTransition(props) {\n    this._start(props);\n  }\n  /**\r\n   * @private\r\n   * @param {AnimationProps} props\r\n   * @param {boolean} [isSpring]\r\n   * @returns {Animation}\r\n   */\n\n\n  _start(props, isSpring) {\n    const animation = isSpring ? new SpringAnimation(\n    /** @type SpringAnimationProps */\n    props) : new CSSAnimation(\n    /** @type CssAnimationProps */\n    props);\n    this.activeAnimations.push(animation);\n\n    animation.onFinish = () => this.stop(animation);\n\n    return animation;\n  }\n  /**\r\n   * @param {Animation} animation\r\n   */\n\n\n  stop(animation) {\n    animation.destroy();\n    const index = this.activeAnimations.indexOf(animation);\n\n    if (index > -1) {\n      this.activeAnimations.splice(index, 1);\n    }\n  }\n\n  stopAll() {\n    // _stopAllAnimations\n    this.activeAnimations.forEach(animation => {\n      animation.destroy();\n    });\n    this.activeAnimations = [];\n  }\n  /**\r\n   * Stop all pan or zoom transitions\r\n   */\n\n\n  stopAllPan() {\n    this.activeAnimations = this.activeAnimations.filter(animation => {\n      if (animation.props.isPan) {\n        animation.destroy();\n        return false;\n      }\n\n      return true;\n    });\n  }\n\n  stopMainScroll() {\n    this.activeAnimations = this.activeAnimations.filter(animation => {\n      if (animation.props.isMainScroll) {\n        animation.destroy();\n        return false;\n      }\n\n      return true;\n    });\n  }\n  /**\r\n   * Returns true if main scroll transition is running\r\n   */\n  // isMainScrollRunning() {\n  //   return this.activeAnimations.some((animation) => {\n  //     return animation.props.isMainScroll;\n  //   });\n  // }\n\n  /**\r\n   * Returns true if any pan or zoom transition is running\r\n   */\n\n\n  isPanRunning() {\n    return this.activeAnimations.some(animation => {\n      return animation.props.isPan;\n    });\n  }\n\n}\n\n/** @typedef {import('./photoswipe.js').default} PhotoSwipe */\n\n/**\r\n * Handles scroll wheel.\r\n * Can pan and zoom current slide image.\r\n */\nclass ScrollWheel {\n  /**\r\n   * @param {PhotoSwipe} pswp\r\n   */\n  constructor(pswp) {\n    this.pswp = pswp;\n    pswp.events.add(pswp.element, 'wheel',\n    /** @type EventListener */\n    this._onWheel.bind(this));\n  }\n  /**\r\n   * @private\r\n   * @param {WheelEvent} e\r\n   */\n\n\n  _onWheel(e) {\n    e.preventDefault();\n    const {\n      currSlide\n    } = this.pswp;\n    let {\n      deltaX,\n      deltaY\n    } = e;\n\n    if (!currSlide) {\n      return;\n    }\n\n    if (this.pswp.dispatch('wheel', {\n      originalEvent: e\n    }).defaultPrevented) {\n      return;\n    }\n\n    if (e.ctrlKey || this.pswp.options.wheelToZoom) {\n      // zoom\n      if (currSlide.isZoomable()) {\n        let zoomFactor = -deltaY;\n\n        if (e.deltaMode === 1\n        /* DOM_DELTA_LINE */\n        ) {\n          zoomFactor *= 0.05;\n        } else {\n          zoomFactor *= e.deltaMode ? 1 : 0.002;\n        }\n\n        zoomFactor = 2 ** zoomFactor;\n        const destZoomLevel = currSlide.currZoomLevel * zoomFactor;\n        currSlide.zoomTo(destZoomLevel, {\n          x: e.clientX,\n          y: e.clientY\n        });\n      }\n    } else {\n      // pan\n      if (currSlide.isPannable()) {\n        if (e.deltaMode === 1\n        /* DOM_DELTA_LINE */\n        ) {\n          // 18 - average line height\n          deltaX *= 18;\n          deltaY *= 18;\n        }\n\n        currSlide.panTo(currSlide.pan.x - deltaX, currSlide.pan.y - deltaY);\n      }\n    }\n  }\n\n}\n\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\n\n/**\r\n * @template T\r\n * @typedef {import('../types.js').Methods<T>} Methods<T>\r\n */\n\n/**\r\n * @typedef {Object} UIElementMarkupProps\r\n * @prop {boolean} [isCustomSVG]\r\n * @prop {string} inner\r\n * @prop {string} [outlineID]\r\n * @prop {number | string} [size]\r\n */\n\n/**\r\n * @typedef {Object} UIElementData\r\n * @prop {DefaultUIElements | string} [name]\r\n * @prop {string} [className]\r\n * @prop {UIElementMarkup} [html]\r\n * @prop {boolean} [isButton]\r\n * @prop {keyof HTMLElementTagNameMap} [tagName]\r\n * @prop {string} [title]\r\n * @prop {string} [ariaLabel]\r\n * @prop {(element: HTMLElement, pswp: PhotoSwipe) => void} [onInit]\r\n * @prop {Methods<PhotoSwipe> | ((e: MouseEvent, element: HTMLElement, pswp: PhotoSwipe) => void)} [onClick]\r\n * @prop {'bar' | 'wrapper' | 'root'} [appendTo]\r\n * @prop {number} [order]\r\n */\n\n/** @typedef {'arrowPrev' | 'arrowNext' | 'close' | 'zoom' | 'counter'} DefaultUIElements */\n\n/** @typedef {string | UIElementMarkupProps} UIElementMarkup */\n\n/**\r\n * @param {UIElementMarkup} [htmlData]\r\n * @returns {string}\r\n */\n\nfunction addElementHTML(htmlData) {\n  if (typeof htmlData === 'string') {\n    // Allow developers to provide full svg,\n    // For example:\n    // <svg viewBox=\"0 0 32 32\" width=\"32\" height=\"32\" aria-hidden=\"true\" class=\"pswp__icn\">\n    //   <path d=\"...\" />\n    //   <circle ... />\n    // </svg>\n    // Can also be any HTML string.\n    return htmlData;\n  }\n\n  if (!htmlData || !htmlData.isCustomSVG) {\n    return '';\n  }\n\n  const svgData = htmlData;\n  let out = '<svg aria-hidden=\"true\" class=\"pswp__icn\" viewBox=\"0 0 %d %d\" width=\"%d\" height=\"%d\">'; // replace all %d with size\n\n  out = out.split('%d').join(\n  /** @type {string} */\n  svgData.size || 32); // Icons may contain outline/shadow,\n  // to make it we \"clone\" base icon shape and add border to it.\n  // Icon itself and border are styled via CSS.\n  //\n  // Property shadowID defines ID of element that should be cloned.\n\n  if (svgData.outlineID) {\n    out += '<use class=\"pswp__icn-shadow\" xlink:href=\"#' + svgData.outlineID + '\"/>';\n  }\n\n  out += svgData.inner;\n  out += '</svg>';\n  return out;\n}\n\nclass UIElement {\n  /**\r\n   * @param {PhotoSwipe} pswp\r\n   * @param {UIElementData} data\r\n   */\n  constructor(pswp, data) {\n    var _container;\n\n    const name = data.name || data.className;\n    let elementHTML = data.html; // @ts-expect-error lookup only by `data.name` maybe?\n\n    if (pswp.options[name] === false) {\n      // exit if element is disabled from options\n      return;\n    } // Allow to override SVG icons from options\n    // @ts-expect-error lookup only by `data.name` maybe?\n\n\n    if (typeof pswp.options[name + 'SVG'] === 'string') {\n      // arrowPrevSVG\n      // arrowNextSVG\n      // closeSVG\n      // zoomSVG\n      // @ts-expect-error lookup only by `data.name` maybe?\n      elementHTML = pswp.options[name + 'SVG'];\n    }\n\n    pswp.dispatch('uiElementCreate', {\n      data\n    });\n    let className = '';\n\n    if (data.isButton) {\n      className += 'pswp__button ';\n      className += data.className || `pswp__button--${data.name}`;\n    } else {\n      className += data.className || `pswp__${data.name}`;\n    }\n\n    let tagName = data.isButton ? data.tagName || 'button' : data.tagName || 'div';\n    tagName =\n    /** @type {keyof HTMLElementTagNameMap} */\n    tagName.toLowerCase();\n    /** @type {HTMLElement} */\n\n    const element = createElement(className, tagName);\n\n    if (data.isButton) {\n      if (tagName === 'button') {\n        /** @type {HTMLButtonElement} */\n        element.type = 'button';\n      }\n\n      let {\n        title\n      } = data;\n      const {\n        ariaLabel\n      } = data; // @ts-expect-error lookup only by `data.name` maybe?\n\n      if (typeof pswp.options[name + 'Title'] === 'string') {\n        // @ts-expect-error lookup only by `data.name` maybe?\n        title = pswp.options[name + 'Title'];\n      }\n\n      if (title) {\n        element.title = title;\n      }\n\n      const ariaText = ariaLabel || title;\n\n      if (ariaText) {\n        element.setAttribute('aria-label', ariaText);\n      }\n    }\n\n    element.innerHTML = addElementHTML(elementHTML);\n\n    if (data.onInit) {\n      data.onInit(element, pswp);\n    }\n\n    if (data.onClick) {\n      element.onclick = e => {\n        if (typeof data.onClick === 'string') {\n          // @ts-ignore\n          pswp[data.onClick]();\n        } else if (typeof data.onClick === 'function') {\n          data.onClick(e, element, pswp);\n        }\n      };\n    } // Top bar is default position\n\n\n    const appendTo = data.appendTo || 'bar';\n    /** @type {HTMLElement | undefined} root element by default */\n\n    let container = pswp.element;\n\n    if (appendTo === 'bar') {\n      if (!pswp.topBar) {\n        pswp.topBar = createElement('pswp__top-bar pswp__hide-on-close', 'div', pswp.scrollWrap);\n      }\n\n      container = pswp.topBar;\n    } else {\n      // element outside of top bar gets a secondary class\n      // that makes element fade out on close\n      element.classList.add('pswp__hide-on-close');\n\n      if (appendTo === 'wrapper') {\n        container = pswp.scrollWrap;\n      }\n    }\n\n    (_container = container) === null || _container === void 0 || _container.appendChild(pswp.applyFilters('uiElement', element, data));\n  }\n\n}\n\n/*\r\n  Backward and forward arrow buttons\r\n */\n\n/** @typedef {import('./ui-element.js').UIElementData} UIElementData */\n\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\n\n/**\r\n *\r\n * @param {HTMLElement} element\r\n * @param {PhotoSwipe} pswp\r\n * @param {boolean} [isNextButton]\r\n */\nfunction initArrowButton(element, pswp, isNextButton) {\n  element.classList.add('pswp__button--arrow'); // TODO: this should point to a unique id for this instance\n\n  element.setAttribute('aria-controls', 'pswp__items');\n  pswp.on('change', () => {\n    if (!pswp.options.loop) {\n      if (isNextButton) {\n        /** @type {HTMLButtonElement} */\n        element.disabled = !(pswp.currIndex < pswp.getNumItems() - 1);\n      } else {\n        /** @type {HTMLButtonElement} */\n        element.disabled = !(pswp.currIndex > 0);\n      }\n    }\n  });\n}\n/** @type {UIElementData} */\n\n\nconst arrowPrev = {\n  name: 'arrowPrev',\n  className: 'pswp__button--arrow--prev',\n  title: 'Previous',\n  order: 10,\n  isButton: true,\n  appendTo: 'wrapper',\n  html: {\n    isCustomSVG: true,\n    size: 60,\n    inner: '<path d=\"M29 43l-3 3-16-16 16-16 3 3-13 13 13 13z\" id=\"pswp__icn-arrow\"/>',\n    outlineID: 'pswp__icn-arrow'\n  },\n  onClick: 'prev',\n  onInit: initArrowButton\n};\n/** @type {UIElementData} */\n\nconst arrowNext = {\n  name: 'arrowNext',\n  className: 'pswp__button--arrow--next',\n  title: 'Next',\n  order: 11,\n  isButton: true,\n  appendTo: 'wrapper',\n  html: {\n    isCustomSVG: true,\n    size: 60,\n    inner: '<use xlink:href=\"#pswp__icn-arrow\"/>',\n    outlineID: 'pswp__icn-arrow'\n  },\n  onClick: 'next',\n  onInit: (el, pswp) => {\n    initArrowButton(el, pswp, true);\n  }\n};\n\n/** @type {import('./ui-element.js').UIElementData} UIElementData */\nconst closeButton = {\n  name: 'close',\n  title: 'Close',\n  order: 20,\n  isButton: true,\n  html: {\n    isCustomSVG: true,\n    inner: '<path d=\"M24 10l-2-2-6 6-6-6-2 2 6 6-6 6 2 2 6-6 6 6 2-2-6-6z\" id=\"pswp__icn-close\"/>',\n    outlineID: 'pswp__icn-close'\n  },\n  onClick: 'close'\n};\n\n/** @type {import('./ui-element.js').UIElementData} UIElementData */\nconst zoomButton = {\n  name: 'zoom',\n  title: 'Zoom',\n  order: 10,\n  isButton: true,\n  html: {\n    isCustomSVG: true,\n    // eslint-disable-next-line max-len\n    inner: '<path d=\"M17.426 19.926a6 6 0 1 1 1.5-1.5L23 22.5 21.5 24l-4.074-4.074z\" id=\"pswp__icn-zoom\"/>' + '<path fill=\"currentColor\" class=\"pswp__zoom-icn-bar-h\" d=\"M11 16v-2h6v2z\"/>' + '<path fill=\"currentColor\" class=\"pswp__zoom-icn-bar-v\" d=\"M13 12h2v6h-2z\"/>',\n    outlineID: 'pswp__icn-zoom'\n  },\n  onClick: 'toggleZoom'\n};\n\n/** @type {import('./ui-element.js').UIElementData} UIElementData */\nconst loadingIndicator = {\n  name: 'preloader',\n  appendTo: 'bar',\n  order: 7,\n  html: {\n    isCustomSVG: true,\n    // eslint-disable-next-line max-len\n    inner: '<path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M21.2 16a5.2 5.2 0 1 1-5.2-5.2V8a8 8 0 1 0 8 8h-2.8Z\" id=\"pswp__icn-loading\"/>',\n    outlineID: 'pswp__icn-loading'\n  },\n  onInit: (indicatorElement, pswp) => {\n    /** @type {boolean | undefined} */\n    let isVisible;\n    /** @type {NodeJS.Timeout | null} */\n\n    let delayTimeout = null;\n    /**\r\n     * @param {string} className\r\n     * @param {boolean} add\r\n     */\n\n    const toggleIndicatorClass = (className, add) => {\n      indicatorElement.classList.toggle('pswp__preloader--' + className, add);\n    };\n    /**\r\n     * @param {boolean} visible\r\n     */\n\n\n    const setIndicatorVisibility = visible => {\n      if (isVisible !== visible) {\n        isVisible = visible;\n        toggleIndicatorClass('active', visible);\n      }\n    };\n\n    const updatePreloaderVisibility = () => {\n      var _pswp$currSlide;\n\n      if (!((_pswp$currSlide = pswp.currSlide) !== null && _pswp$currSlide !== void 0 && _pswp$currSlide.content.isLoading())) {\n        setIndicatorVisibility(false);\n\n        if (delayTimeout) {\n          clearTimeout(delayTimeout);\n          delayTimeout = null;\n        }\n\n        return;\n      }\n\n      if (!delayTimeout) {\n        // display loading indicator with delay\n        delayTimeout = setTimeout(() => {\n          var _pswp$currSlide2;\n\n          setIndicatorVisibility(Boolean((_pswp$currSlide2 = pswp.currSlide) === null || _pswp$currSlide2 === void 0 ? void 0 : _pswp$currSlide2.content.isLoading()));\n          delayTimeout = null;\n        }, pswp.options.preloaderDelay);\n      }\n    };\n\n    pswp.on('change', updatePreloaderVisibility);\n    pswp.on('loadComplete', e => {\n      if (pswp.currSlide === e.slide) {\n        updatePreloaderVisibility();\n      }\n    }); // expose the method\n\n    if (pswp.ui) {\n      pswp.ui.updatePreloaderVisibility = updatePreloaderVisibility;\n    }\n  }\n};\n\n/** @type {import('./ui-element.js').UIElementData} UIElementData */\nconst counterIndicator = {\n  name: 'counter',\n  order: 5,\n  onInit: (counterElement, pswp) => {\n    pswp.on('change', () => {\n      counterElement.innerText = pswp.currIndex + 1 + pswp.options.indexIndicatorSep + pswp.getNumItems();\n    });\n  }\n};\n\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\n\n/** @typedef {import('./ui-element.js').UIElementData} UIElementData */\n\n/**\r\n * Set special class on element when image is zoomed.\r\n *\r\n * By default, it is used to adjust\r\n * zoom icon and zoom cursor via CSS.\r\n *\r\n * @param {HTMLElement} el\r\n * @param {boolean} isZoomedIn\r\n */\n\nfunction setZoomedIn(el, isZoomedIn) {\n  el.classList.toggle('pswp--zoomed-in', isZoomedIn);\n}\n\nclass UI {\n  /**\r\n   * @param {PhotoSwipe} pswp\r\n   */\n  constructor(pswp) {\n    this.pswp = pswp;\n    this.isRegistered = false;\n    /** @type {UIElementData[]} */\n\n    this.uiElementsData = [];\n    /** @type {(UIElement | UIElementData)[]} */\n\n    this.items = [];\n    /** @type {() => void} */\n\n    this.updatePreloaderVisibility = () => {};\n    /**\r\n     * @private\r\n     * @type {number | undefined}\r\n     */\n\n\n    this._lastUpdatedZoomLevel = undefined;\n  }\n\n  init() {\n    const {\n      pswp\n    } = this;\n    this.isRegistered = false;\n    this.uiElementsData = [closeButton, arrowPrev, arrowNext, zoomButton, loadingIndicator, counterIndicator];\n    pswp.dispatch('uiRegister'); // sort by order\n\n    this.uiElementsData.sort((a, b) => {\n      // default order is 0\n      return (a.order || 0) - (b.order || 0);\n    });\n    this.items = [];\n    this.isRegistered = true;\n    this.uiElementsData.forEach(uiElementData => {\n      this.registerElement(uiElementData);\n    });\n    pswp.on('change', () => {\n      var _pswp$element;\n\n      (_pswp$element = pswp.element) === null || _pswp$element === void 0 || _pswp$element.classList.toggle('pswp--one-slide', pswp.getNumItems() === 1);\n    });\n    pswp.on('zoomPanUpdate', () => this._onZoomPanUpdate());\n  }\n  /**\r\n   * @param {UIElementData} elementData\r\n   */\n\n\n  registerElement(elementData) {\n    if (this.isRegistered) {\n      this.items.push(new UIElement(this.pswp, elementData));\n    } else {\n      this.uiElementsData.push(elementData);\n    }\n  }\n  /**\r\n   * Fired each time zoom or pan position is changed.\r\n   * Update classes that control visibility of zoom button and cursor icon.\r\n   *\r\n   * @private\r\n   */\n\n\n  _onZoomPanUpdate() {\n    const {\n      template,\n      currSlide,\n      options\n    } = this.pswp;\n\n    if (this.pswp.opener.isClosing || !template || !currSlide) {\n      return;\n    }\n\n    let {\n      currZoomLevel\n    } = currSlide; // if not open yet - check against initial zoom level\n\n    if (!this.pswp.opener.isOpen) {\n      currZoomLevel = currSlide.zoomLevels.initial;\n    }\n\n    if (currZoomLevel === this._lastUpdatedZoomLevel) {\n      return;\n    }\n\n    this._lastUpdatedZoomLevel = currZoomLevel;\n    const currZoomLevelDiff = currSlide.zoomLevels.initial - currSlide.zoomLevels.secondary; // Initial and secondary zoom levels are almost equal\n\n    if (Math.abs(currZoomLevelDiff) < 0.01 || !currSlide.isZoomable()) {\n      // disable zoom\n      setZoomedIn(template, false);\n      template.classList.remove('pswp--zoom-allowed');\n      return;\n    }\n\n    template.classList.add('pswp--zoom-allowed');\n    const potentialZoomLevel = currZoomLevel === currSlide.zoomLevels.initial ? currSlide.zoomLevels.secondary : currSlide.zoomLevels.initial;\n    setZoomedIn(template, potentialZoomLevel <= currZoomLevel);\n\n    if (options.imageClickAction === 'zoom' || options.imageClickAction === 'zoom-or-close') {\n      template.classList.add('pswp--click-to-zoom');\n    }\n  }\n\n}\n\n/** @typedef {import('./slide.js').SlideData} SlideData */\n\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\n\n/** @typedef {{ x: number; y: number; w: number; innerRect?: { w: number; h: number; x: number; y: number } }} Bounds */\n\n/**\r\n * @param {HTMLElement} el\r\n * @returns Bounds\r\n */\nfunction getBoundsByElement(el) {\n  const thumbAreaRect = el.getBoundingClientRect();\n  return {\n    x: thumbAreaRect.left,\n    y: thumbAreaRect.top,\n    w: thumbAreaRect.width\n  };\n}\n/**\r\n * @param {HTMLElement} el\r\n * @param {number} imageWidth\r\n * @param {number} imageHeight\r\n * @returns Bounds\r\n */\n\n\nfunction getCroppedBoundsByElement(el, imageWidth, imageHeight) {\n  const thumbAreaRect = el.getBoundingClientRect(); // fill image into the area\n  // (do they same as object-fit:cover does to retrieve coordinates)\n\n  const hRatio = thumbAreaRect.width / imageWidth;\n  const vRatio = thumbAreaRect.height / imageHeight;\n  const fillZoomLevel = hRatio > vRatio ? hRatio : vRatio;\n  const offsetX = (thumbAreaRect.width - imageWidth * fillZoomLevel) / 2;\n  const offsetY = (thumbAreaRect.height - imageHeight * fillZoomLevel) / 2;\n  /**\r\n   * Coordinates of the image,\r\n   * as if it was not cropped,\r\n   * height is calculated automatically\r\n   *\r\n   * @type {Bounds}\r\n   */\n\n  const bounds = {\n    x: thumbAreaRect.left + offsetX,\n    y: thumbAreaRect.top + offsetY,\n    w: imageWidth * fillZoomLevel\n  }; // Coordinates of inner crop area\n  // relative to the image\n\n  bounds.innerRect = {\n    w: thumbAreaRect.width,\n    h: thumbAreaRect.height,\n    x: offsetX,\n    y: offsetY\n  };\n  return bounds;\n}\n/**\r\n * Get dimensions of thumbnail image\r\n * (click on which opens photoswipe or closes photoswipe to)\r\n *\r\n * @param {number} index\r\n * @param {SlideData} itemData\r\n * @param {PhotoSwipe} instance PhotoSwipe instance\r\n * @returns {Bounds | undefined}\r\n */\n\n\nfunction getThumbBounds(index, itemData, instance) {\n  // legacy event, before filters were introduced\n  const event = instance.dispatch('thumbBounds', {\n    index,\n    itemData,\n    instance\n  }); // @ts-expect-error\n\n  if (event.thumbBounds) {\n    // @ts-expect-error\n    return event.thumbBounds;\n  }\n\n  const {\n    element\n  } = itemData;\n  /** @type {Bounds | undefined} */\n\n  let thumbBounds;\n  /** @type {HTMLElement | null | undefined} */\n\n  let thumbnail;\n\n  if (element && instance.options.thumbSelector !== false) {\n    const thumbSelector = instance.options.thumbSelector || 'img';\n    thumbnail = element.matches(thumbSelector) ? element :\n    /** @type {HTMLElement | null} */\n    element.querySelector(thumbSelector);\n  }\n\n  thumbnail = instance.applyFilters('thumbEl', thumbnail, itemData, index);\n\n  if (thumbnail) {\n    if (!itemData.thumbCropped) {\n      thumbBounds = getBoundsByElement(thumbnail);\n    } else {\n      thumbBounds = getCroppedBoundsByElement(thumbnail, itemData.width || itemData.w || 0, itemData.height || itemData.h || 0);\n    }\n  }\n\n  return instance.applyFilters('thumbBounds', thumbBounds, itemData, index);\n}\n\n/** @typedef {import('../lightbox/lightbox.js').default} PhotoSwipeLightbox */\n\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\n\n/** @typedef {import('../photoswipe.js').PhotoSwipeOptions} PhotoSwipeOptions */\n\n/** @typedef {import('../photoswipe.js').DataSource} DataSource */\n\n/** @typedef {import('../ui/ui-element.js').UIElementData} UIElementData */\n\n/** @typedef {import('../slide/content.js').default} ContentDefault */\n\n/** @typedef {import('../slide/slide.js').default} Slide */\n\n/** @typedef {import('../slide/slide.js').SlideData} SlideData */\n\n/** @typedef {import('../slide/zoom-level.js').default} ZoomLevel */\n\n/** @typedef {import('../slide/get-thumb-bounds.js').Bounds} Bounds */\n\n/**\r\n * Allow adding an arbitrary props to the Content\r\n * https://photoswipe.com/custom-content/#using-webp-image-format\r\n * @typedef {ContentDefault & Record<string, any>} Content\r\n */\n\n/** @typedef {{ x?: number; y?: number }} Point */\n\n/**\r\n * @typedef {Object} PhotoSwipeEventsMap https://photoswipe.com/events/\r\n *\r\n *\r\n * https://photoswipe.com/adding-ui-elements/\r\n *\r\n * @prop {undefined} uiRegister\r\n * @prop {{ data: UIElementData }} uiElementCreate\r\n *\r\n *\r\n * https://photoswipe.com/events/#initialization-events\r\n *\r\n * @prop {undefined} beforeOpen\r\n * @prop {undefined} firstUpdate\r\n * @prop {undefined} initialLayout\r\n * @prop {undefined} change\r\n * @prop {undefined} afterInit\r\n * @prop {undefined} bindEvents\r\n *\r\n *\r\n * https://photoswipe.com/events/#opening-or-closing-transition-events\r\n *\r\n * @prop {undefined} openingAnimationStart\r\n * @prop {undefined} openingAnimationEnd\r\n * @prop {undefined} closingAnimationStart\r\n * @prop {undefined} closingAnimationEnd\r\n *\r\n *\r\n * https://photoswipe.com/events/#closing-events\r\n *\r\n * @prop {undefined} close\r\n * @prop {undefined} destroy\r\n *\r\n *\r\n * https://photoswipe.com/events/#pointer-and-gesture-events\r\n *\r\n * @prop {{ originalEvent: PointerEvent }} pointerDown\r\n * @prop {{ originalEvent: PointerEvent }} pointerMove\r\n * @prop {{ originalEvent: PointerEvent }} pointerUp\r\n * @prop {{ bgOpacity: number }} pinchClose can be default prevented\r\n * @prop {{ panY: number }} verticalDrag can be default prevented\r\n *\r\n *\r\n * https://photoswipe.com/events/#slide-content-events\r\n *\r\n * @prop {{ content: Content }} contentInit\r\n * @prop {{ content: Content; isLazy: boolean }} contentLoad can be default prevented\r\n * @prop {{ content: Content; isLazy: boolean }} contentLoadImage can be default prevented\r\n * @prop {{ content: Content; slide: Slide; isError?: boolean }} loadComplete\r\n * @prop {{ content: Content; slide: Slide }} loadError\r\n * @prop {{ content: Content; width: number; height: number }} contentResize can be default prevented\r\n * @prop {{ content: Content; width: number; height: number; slide: Slide }} imageSizeChange\r\n * @prop {{ content: Content }} contentLazyLoad can be default prevented\r\n * @prop {{ content: Content }} contentAppend can be default prevented\r\n * @prop {{ content: Content }} contentActivate can be default prevented\r\n * @prop {{ content: Content }} contentDeactivate can be default prevented\r\n * @prop {{ content: Content }} contentRemove can be default prevented\r\n * @prop {{ content: Content }} contentDestroy can be default prevented\r\n *\r\n *\r\n * undocumented\r\n *\r\n * @prop {{ point: Point; originalEvent: PointerEvent }} imageClickAction can be default prevented\r\n * @prop {{ point: Point; originalEvent: PointerEvent }} bgClickAction can be default prevented\r\n * @prop {{ point: Point; originalEvent: PointerEvent }} tapAction can be default prevented\r\n * @prop {{ point: Point; originalEvent: PointerEvent }} doubleTapAction can be default prevented\r\n *\r\n * @prop {{ originalEvent: KeyboardEvent }} keydown can be default prevented\r\n * @prop {{ x: number; dragging: boolean }} moveMainScroll\r\n * @prop {{ slide: Slide }} firstZoomPan\r\n * @prop {{ slide: Slide | undefined, data: SlideData, index: number }} gettingData\r\n * @prop {undefined} beforeResize\r\n * @prop {undefined} resize\r\n * @prop {undefined} viewportSize\r\n * @prop {undefined} updateScrollOffset\r\n * @prop {{ slide: Slide }} slideInit\r\n * @prop {{ slide: Slide }} afterSetContent\r\n * @prop {{ slide: Slide }} slideLoad\r\n * @prop {{ slide: Slide }} appendHeavy can be default prevented\r\n * @prop {{ slide: Slide }} appendHeavyContent\r\n * @prop {{ slide: Slide }} slideActivate\r\n * @prop {{ slide: Slide }} slideDeactivate\r\n * @prop {{ slide: Slide }} slideDestroy\r\n * @prop {{ destZoomLevel: number, centerPoint: Point | undefined, transitionDuration: number | false | undefined }} beforeZoomTo\r\n * @prop {{ slide: Slide }} zoomPanUpdate\r\n * @prop {{ slide: Slide }} initialZoomPan\r\n * @prop {{ slide: Slide }} calcSlideSize\r\n * @prop {undefined} resolutionChanged\r\n * @prop {{ originalEvent: WheelEvent }} wheel can be default prevented\r\n * @prop {{ content: Content }} contentAppendImage can be default prevented\r\n * @prop {{ index: number; itemData: SlideData }} lazyLoadSlide can be default prevented\r\n * @prop {undefined} lazyLoad\r\n * @prop {{ slide: Slide }} calcBounds\r\n * @prop {{ zoomLevels: ZoomLevel, slideData: SlideData }} zoomLevelsUpdate\r\n *\r\n *\r\n * legacy\r\n *\r\n * @prop {undefined} init\r\n * @prop {undefined} initialZoomIn\r\n * @prop {undefined} initialZoomOut\r\n * @prop {undefined} initialZoomInEnd\r\n * @prop {undefined} initialZoomOutEnd\r\n * @prop {{ dataSource: DataSource | undefined, numItems: number }} numItems\r\n * @prop {{ itemData: SlideData; index: number }} itemData\r\n * @prop {{ index: number, itemData: SlideData, instance: PhotoSwipe }} thumbBounds\r\n */\n\n/**\r\n * @typedef {Object} PhotoSwipeFiltersMap https://photoswipe.com/filters/\r\n *\r\n * @prop {(numItems: number, dataSource: DataSource | undefined) => number} numItems\r\n * Modify the total amount of slides. Example on Data sources page.\r\n * https://photoswipe.com/filters/#numitems\r\n *\r\n * @prop {(itemData: SlideData, index: number) => SlideData} itemData\r\n * Modify slide item data. Example on Data sources page.\r\n * https://photoswipe.com/filters/#itemdata\r\n *\r\n * @prop {(itemData: SlideData, element: HTMLElement, linkEl: HTMLAnchorElement) => SlideData} domItemData\r\n * Modify item data when it's parsed from DOM element. Example on Data sources page.\r\n * https://photoswipe.com/filters/#domitemdata\r\n *\r\n * @prop {(clickedIndex: number, e: MouseEvent, instance: PhotoSwipeLightbox) => number} clickedIndex\r\n * Modify clicked gallery item index.\r\n * https://photoswipe.com/filters/#clickedindex\r\n *\r\n * @prop {(placeholderSrc: string | false, content: Content) => string | false} placeholderSrc\r\n * Modify placeholder image source.\r\n * https://photoswipe.com/filters/#placeholdersrc\r\n *\r\n * @prop {(isContentLoading: boolean, content: Content) => boolean} isContentLoading\r\n * Modify if the content is currently loading.\r\n * https://photoswipe.com/filters/#iscontentloading\r\n *\r\n * @prop {(isContentZoomable: boolean, content: Content) => boolean} isContentZoomable\r\n * Modify if the content can be zoomed.\r\n * https://photoswipe.com/filters/#iscontentzoomable\r\n *\r\n * @prop {(useContentPlaceholder: boolean, content: Content) => boolean} useContentPlaceholder\r\n * Modify if the placeholder should be used for the content.\r\n * https://photoswipe.com/filters/#usecontentplaceholder\r\n *\r\n * @prop {(isKeepingPlaceholder: boolean, content: Content) => boolean} isKeepingPlaceholder\r\n * Modify if the placeholder should be kept after the content is loaded.\r\n * https://photoswipe.com/filters/#iskeepingplaceholder\r\n *\r\n *\r\n * @prop {(contentErrorElement: HTMLElement, content: Content) => HTMLElement} contentErrorElement\r\n * Modify an element when the content has error state (for example, if image cannot be loaded).\r\n * https://photoswipe.com/filters/#contenterrorelement\r\n *\r\n * @prop {(element: HTMLElement, data: UIElementData) => HTMLElement} uiElement\r\n * Modify a UI element that's being created.\r\n * https://photoswipe.com/filters/#uielement\r\n *\r\n * @prop {(thumbnail: HTMLElement | null | undefined, itemData: SlideData, index: number) => HTMLElement} thumbEl\r\n * Modify the thumbnail element from which opening zoom animation starts or ends.\r\n * https://photoswipe.com/filters/#thumbel\r\n *\r\n * @prop {(thumbBounds: Bounds | undefined, itemData: SlideData, index: number) => Bounds} thumbBounds\r\n * Modify the thumbnail bounds from which opening zoom animation starts or ends.\r\n * https://photoswipe.com/filters/#thumbbounds\r\n *\r\n * @prop {(srcsetSizesWidth: number, content: Content) => number} srcsetSizesWidth\r\n *\r\n * @prop {(preventPointerEvent: boolean, event: PointerEvent, pointerType: string) => boolean} preventPointerEvent\r\n *\r\n */\n\n/**\r\n * @template {keyof PhotoSwipeFiltersMap} T\r\n * @typedef {{ fn: PhotoSwipeFiltersMap[T], priority: number }} Filter\r\n */\n\n/**\r\n * @template {keyof PhotoSwipeEventsMap} T\r\n * @typedef {PhotoSwipeEventsMap[T] extends undefined ? PhotoSwipeEvent<T> : PhotoSwipeEvent<T> & PhotoSwipeEventsMap[T]} AugmentedEvent\r\n */\n\n/**\r\n * @template {keyof PhotoSwipeEventsMap} T\r\n * @typedef {(event: AugmentedEvent<T>) => void} EventCallback\r\n */\n\n/**\r\n * Base PhotoSwipe event object\r\n *\r\n * @template {keyof PhotoSwipeEventsMap} T\r\n */\nclass PhotoSwipeEvent {\n  /**\r\n   * @param {T} type\r\n   * @param {PhotoSwipeEventsMap[T]} [details]\r\n   */\n  constructor(type, details) {\n    this.type = type;\n    this.defaultPrevented = false;\n\n    if (details) {\n      Object.assign(this, details);\n    }\n  }\n\n  preventDefault() {\n    this.defaultPrevented = true;\n  }\n\n}\n/**\r\n * PhotoSwipe base class that can listen and dispatch for events.\r\n * Shared by PhotoSwipe Core and PhotoSwipe Lightbox, extended by base.js\r\n */\n\n\nclass Eventable {\n  constructor() {\n    /**\r\n     * @type {{ [T in keyof PhotoSwipeEventsMap]?: ((event: AugmentedEvent<T>) => void)[] }}\r\n     */\n    this._listeners = {};\n    /**\r\n     * @type {{ [T in keyof PhotoSwipeFiltersMap]?: Filter<T>[] }}\r\n     */\n\n    this._filters = {};\n    /** @type {PhotoSwipe | undefined} */\n\n    this.pswp = undefined;\n    /** @type {PhotoSwipeOptions | undefined} */\n\n    this.options = undefined;\n  }\n  /**\r\n   * @template {keyof PhotoSwipeFiltersMap} T\r\n   * @param {T} name\r\n   * @param {PhotoSwipeFiltersMap[T]} fn\r\n   * @param {number} priority\r\n   */\n\n\n  addFilter(name, fn, priority = 100) {\n    var _this$_filters$name, _this$_filters$name2, _this$pswp;\n\n    if (!this._filters[name]) {\n      this._filters[name] = [];\n    }\n\n    (_this$_filters$name = this._filters[name]) === null || _this$_filters$name === void 0 || _this$_filters$name.push({\n      fn,\n      priority\n    });\n    (_this$_filters$name2 = this._filters[name]) === null || _this$_filters$name2 === void 0 || _this$_filters$name2.sort((f1, f2) => f1.priority - f2.priority);\n    (_this$pswp = this.pswp) === null || _this$pswp === void 0 || _this$pswp.addFilter(name, fn, priority);\n  }\n  /**\r\n   * @template {keyof PhotoSwipeFiltersMap} T\r\n   * @param {T} name\r\n   * @param {PhotoSwipeFiltersMap[T]} fn\r\n   */\n\n\n  removeFilter(name, fn) {\n    if (this._filters[name]) {\n      // @ts-expect-error\n      this._filters[name] = this._filters[name].filter(filter => filter.fn !== fn);\n    }\n\n    if (this.pswp) {\n      this.pswp.removeFilter(name, fn);\n    }\n  }\n  /**\r\n   * @template {keyof PhotoSwipeFiltersMap} T\r\n   * @param {T} name\r\n   * @param {Parameters<PhotoSwipeFiltersMap[T]>} args\r\n   * @returns {Parameters<PhotoSwipeFiltersMap[T]>[0]}\r\n   */\n\n\n  applyFilters(name, ...args) {\n    var _this$_filters$name3;\n\n    (_this$_filters$name3 = this._filters[name]) === null || _this$_filters$name3 === void 0 || _this$_filters$name3.forEach(filter => {\n      // @ts-expect-error\n      args[0] = filter.fn.apply(this, args);\n    });\n    return args[0];\n  }\n  /**\r\n   * @template {keyof PhotoSwipeEventsMap} T\r\n   * @param {T} name\r\n   * @param {EventCallback<T>} fn\r\n   */\n\n\n  on(name, fn) {\n    var _this$_listeners$name, _this$pswp2;\n\n    if (!this._listeners[name]) {\n      this._listeners[name] = [];\n    }\n\n    (_this$_listeners$name = this._listeners[name]) === null || _this$_listeners$name === void 0 || _this$_listeners$name.push(fn); // When binding events to lightbox,\n    // also bind events to PhotoSwipe Core,\n    // if it's open.\n\n    (_this$pswp2 = this.pswp) === null || _this$pswp2 === void 0 || _this$pswp2.on(name, fn);\n  }\n  /**\r\n   * @template {keyof PhotoSwipeEventsMap} T\r\n   * @param {T} name\r\n   * @param {EventCallback<T>} fn\r\n   */\n\n\n  off(name, fn) {\n    var _this$pswp3;\n\n    if (this._listeners[name]) {\n      // @ts-expect-error\n      this._listeners[name] = this._listeners[name].filter(listener => fn !== listener);\n    }\n\n    (_this$pswp3 = this.pswp) === null || _this$pswp3 === void 0 || _this$pswp3.off(name, fn);\n  }\n  /**\r\n   * @template {keyof PhotoSwipeEventsMap} T\r\n   * @param {T} name\r\n   * @param {PhotoSwipeEventsMap[T]} [details]\r\n   * @returns {AugmentedEvent<T>}\r\n   */\n\n\n  dispatch(name, details) {\n    var _this$_listeners$name2;\n\n    if (this.pswp) {\n      return this.pswp.dispatch(name, details);\n    }\n\n    const event =\n    /** @type {AugmentedEvent<T>} */\n    new PhotoSwipeEvent(name, details);\n    (_this$_listeners$name2 = this._listeners[name]) === null || _this$_listeners$name2 === void 0 || _this$_listeners$name2.forEach(listener => {\n      listener.call(this, event);\n    });\n    return event;\n  }\n\n}\n\nclass Placeholder {\n  /**\r\n   * @param {string | false} imageSrc\r\n   * @param {HTMLElement} container\r\n   */\n  constructor(imageSrc, container) {\n    // Create placeholder\n    // (stretched thumbnail or simple div behind the main image)\n\n    /** @type {HTMLImageElement | HTMLDivElement | null} */\n    this.element = createElement('pswp__img pswp__img--placeholder', imageSrc ? 'img' : 'div', container);\n\n    if (imageSrc) {\n      const imgEl =\n      /** @type {HTMLImageElement} */\n      this.element;\n      imgEl.decoding = 'async';\n      imgEl.alt = '';\n      imgEl.src = imageSrc;\n      imgEl.setAttribute('role', 'presentation');\n    }\n\n    this.element.setAttribute('aria-hidden', 'true');\n  }\n  /**\r\n   * @param {number} width\r\n   * @param {number} height\r\n   */\n\n\n  setDisplayedSize(width, height) {\n    if (!this.element) {\n      return;\n    }\n\n    if (this.element.tagName === 'IMG') {\n      // Use transform scale() to modify img placeholder size\n      // (instead of changing width/height directly).\n      // This helps with performance, specifically in iOS15 Safari.\n      setWidthHeight(this.element, 250, 'auto');\n      this.element.style.transformOrigin = '0 0';\n      this.element.style.transform = toTransformString(0, 0, width / 250);\n    } else {\n      setWidthHeight(this.element, width, height);\n    }\n  }\n\n  destroy() {\n    var _this$element;\n\n    if ((_this$element = this.element) !== null && _this$element !== void 0 && _this$element.parentNode) {\n      this.element.remove();\n    }\n\n    this.element = null;\n  }\n\n}\n\n/** @typedef {import('./slide.js').default} Slide */\n\n/** @typedef {import('./slide.js').SlideData} SlideData */\n\n/** @typedef {import('../core/base.js').default} PhotoSwipeBase */\n\n/** @typedef {import('../util/util.js').LoadState} LoadState */\n\nclass Content {\n  /**\r\n   * @param {SlideData} itemData Slide data\r\n   * @param {PhotoSwipeBase} instance PhotoSwipe or PhotoSwipeLightbox instance\r\n   * @param {number} index\r\n   */\n  constructor(itemData, instance, index) {\n    this.instance = instance;\n    this.data = itemData;\n    this.index = index;\n    /** @type {HTMLImageElement | HTMLDivElement | undefined} */\n\n    this.element = undefined;\n    /** @type {Placeholder | undefined} */\n\n    this.placeholder = undefined;\n    /** @type {Slide | undefined} */\n\n    this.slide = undefined;\n    this.displayedImageWidth = 0;\n    this.displayedImageHeight = 0;\n    this.width = Number(this.data.w) || Number(this.data.width) || 0;\n    this.height = Number(this.data.h) || Number(this.data.height) || 0;\n    this.isAttached = false;\n    this.hasSlide = false;\n    this.isDecoding = false;\n    /** @type {LoadState} */\n\n    this.state = LOAD_STATE.IDLE;\n\n    if (this.data.type) {\n      this.type = this.data.type;\n    } else if (this.data.src) {\n      this.type = 'image';\n    } else {\n      this.type = 'html';\n    }\n\n    this.instance.dispatch('contentInit', {\n      content: this\n    });\n  }\n\n  removePlaceholder() {\n    if (this.placeholder && !this.keepPlaceholder()) {\n      // With delay, as image might be loaded, but not rendered\n      setTimeout(() => {\n        if (this.placeholder) {\n          this.placeholder.destroy();\n          this.placeholder = undefined;\n        }\n      }, 1000);\n    }\n  }\n  /**\r\n   * Preload content\r\n   *\r\n   * @param {boolean} isLazy\r\n   * @param {boolean} [reload]\r\n   */\n\n\n  load(isLazy, reload) {\n    if (this.slide && this.usePlaceholder()) {\n      if (!this.placeholder) {\n        const placeholderSrc = this.instance.applyFilters('placeholderSrc', // use  image-based placeholder only for the first slide,\n        // as rendering (even small stretched thumbnail) is an expensive operation\n        this.data.msrc && this.slide.isFirstSlide ? this.data.msrc : false, this);\n        this.placeholder = new Placeholder(placeholderSrc, this.slide.container);\n      } else {\n        const placeholderEl = this.placeholder.element; // Add placeholder to DOM if it was already created\n\n        if (placeholderEl && !placeholderEl.parentElement) {\n          this.slide.container.prepend(placeholderEl);\n        }\n      }\n    }\n\n    if (this.element && !reload) {\n      return;\n    }\n\n    if (this.instance.dispatch('contentLoad', {\n      content: this,\n      isLazy\n    }).defaultPrevented) {\n      return;\n    }\n\n    if (this.isImageContent()) {\n      this.element = createElement('pswp__img', 'img'); // Start loading only after width is defined, as sizes might depend on it.\n      // Due to Safari feature, we must define sizes before srcset.\n\n      if (this.displayedImageWidth) {\n        this.loadImage(isLazy);\n      }\n    } else {\n      this.element = createElement('pswp__content', 'div');\n      this.element.innerHTML = this.data.html || '';\n    }\n\n    if (reload && this.slide) {\n      this.slide.updateContentSize(true);\n    }\n  }\n  /**\r\n   * Preload image\r\n   *\r\n   * @param {boolean} isLazy\r\n   */\n\n\n  loadImage(isLazy) {\n    var _this$data$src, _this$data$alt;\n\n    if (!this.isImageContent() || !this.element || this.instance.dispatch('contentLoadImage', {\n      content: this,\n      isLazy\n    }).defaultPrevented) {\n      return;\n    }\n\n    const imageElement =\n    /** @type HTMLImageElement */\n    this.element;\n    this.updateSrcsetSizes();\n\n    if (this.data.srcset) {\n      imageElement.srcset = this.data.srcset;\n    }\n\n    imageElement.src = (_this$data$src = this.data.src) !== null && _this$data$src !== void 0 ? _this$data$src : '';\n    imageElement.alt = (_this$data$alt = this.data.alt) !== null && _this$data$alt !== void 0 ? _this$data$alt : '';\n    this.state = LOAD_STATE.LOADING;\n\n    if (imageElement.complete) {\n      this.onLoaded();\n    } else {\n      imageElement.onload = () => {\n        this.onLoaded();\n      };\n\n      imageElement.onerror = () => {\n        this.onError();\n      };\n    }\n  }\n  /**\r\n   * Assign slide to content\r\n   *\r\n   * @param {Slide} slide\r\n   */\n\n\n  setSlide(slide) {\n    this.slide = slide;\n    this.hasSlide = true;\n    this.instance = slide.pswp; // todo: do we need to unset slide?\n  }\n  /**\r\n   * Content load success handler\r\n   */\n\n\n  onLoaded() {\n    this.state = LOAD_STATE.LOADED;\n\n    if (this.slide && this.element) {\n      this.instance.dispatch('loadComplete', {\n        slide: this.slide,\n        content: this\n      }); // if content is reloaded\n\n      if (this.slide.isActive && this.slide.heavyAppended && !this.element.parentNode) {\n        this.append();\n        this.slide.updateContentSize(true);\n      }\n\n      if (this.state === LOAD_STATE.LOADED || this.state === LOAD_STATE.ERROR) {\n        this.removePlaceholder();\n      }\n    }\n  }\n  /**\r\n   * Content load error handler\r\n   */\n\n\n  onError() {\n    this.state = LOAD_STATE.ERROR;\n\n    if (this.slide) {\n      this.displayError();\n      this.instance.dispatch('loadComplete', {\n        slide: this.slide,\n        isError: true,\n        content: this\n      });\n      this.instance.dispatch('loadError', {\n        slide: this.slide,\n        content: this\n      });\n    }\n  }\n  /**\r\n   * @returns {Boolean} If the content is currently loading\r\n   */\n\n\n  isLoading() {\n    return this.instance.applyFilters('isContentLoading', this.state === LOAD_STATE.LOADING, this);\n  }\n  /**\r\n   * @returns {Boolean} If the content is in error state\r\n   */\n\n\n  isError() {\n    return this.state === LOAD_STATE.ERROR;\n  }\n  /**\r\n   * @returns {boolean} If the content is image\r\n   */\n\n\n  isImageContent() {\n    return this.type === 'image';\n  }\n  /**\r\n   * Update content size\r\n   *\r\n   * @param {Number} width\r\n   * @param {Number} height\r\n   */\n\n\n  setDisplayedSize(width, height) {\n    if (!this.element) {\n      return;\n    }\n\n    if (this.placeholder) {\n      this.placeholder.setDisplayedSize(width, height);\n    }\n\n    if (this.instance.dispatch('contentResize', {\n      content: this,\n      width,\n      height\n    }).defaultPrevented) {\n      return;\n    }\n\n    setWidthHeight(this.element, width, height);\n\n    if (this.isImageContent() && !this.isError()) {\n      const isInitialSizeUpdate = !this.displayedImageWidth && width;\n      this.displayedImageWidth = width;\n      this.displayedImageHeight = height;\n\n      if (isInitialSizeUpdate) {\n        this.loadImage(false);\n      } else {\n        this.updateSrcsetSizes();\n      }\n\n      if (this.slide) {\n        this.instance.dispatch('imageSizeChange', {\n          slide: this.slide,\n          width,\n          height,\n          content: this\n        });\n      }\n    }\n  }\n  /**\r\n   * @returns {boolean} If the content can be zoomed\r\n   */\n\n\n  isZoomable() {\n    return this.instance.applyFilters('isContentZoomable', this.isImageContent() && this.state !== LOAD_STATE.ERROR, this);\n  }\n  /**\r\n   * Update image srcset sizes attribute based on width and height\r\n   */\n\n\n  updateSrcsetSizes() {\n    // Handle srcset sizes attribute.\n    //\n    // Never lower quality, if it was increased previously.\n    // Chrome does this automatically, Firefox and Safari do not,\n    // so we store largest used size in dataset.\n    if (!this.isImageContent() || !this.element || !this.data.srcset) {\n      return;\n    }\n\n    const image =\n    /** @type HTMLImageElement */\n    this.element;\n    const sizesWidth = this.instance.applyFilters('srcsetSizesWidth', this.displayedImageWidth, this);\n\n    if (!image.dataset.largestUsedSize || sizesWidth > parseInt(image.dataset.largestUsedSize, 10)) {\n      image.sizes = sizesWidth + 'px';\n      image.dataset.largestUsedSize = String(sizesWidth);\n    }\n  }\n  /**\r\n   * @returns {boolean} If content should use a placeholder (from msrc by default)\r\n   */\n\n\n  usePlaceholder() {\n    return this.instance.applyFilters('useContentPlaceholder', this.isImageContent(), this);\n  }\n  /**\r\n   * Preload content with lazy-loading param\r\n   */\n\n\n  lazyLoad() {\n    if (this.instance.dispatch('contentLazyLoad', {\n      content: this\n    }).defaultPrevented) {\n      return;\n    }\n\n    this.load(true);\n  }\n  /**\r\n   * @returns {boolean} If placeholder should be kept after content is loaded\r\n   */\n\n\n  keepPlaceholder() {\n    return this.instance.applyFilters('isKeepingPlaceholder', this.isLoading(), this);\n  }\n  /**\r\n   * Destroy the content\r\n   */\n\n\n  destroy() {\n    this.hasSlide = false;\n    this.slide = undefined;\n\n    if (this.instance.dispatch('contentDestroy', {\n      content: this\n    }).defaultPrevented) {\n      return;\n    }\n\n    this.remove();\n\n    if (this.placeholder) {\n      this.placeholder.destroy();\n      this.placeholder = undefined;\n    }\n\n    if (this.isImageContent() && this.element) {\n      this.element.onload = null;\n      this.element.onerror = null;\n      this.element = undefined;\n    }\n  }\n  /**\r\n   * Display error message\r\n   */\n\n\n  displayError() {\n    if (this.slide) {\n      var _this$instance$option, _this$instance$option2;\n\n      let errorMsgEl = createElement('pswp__error-msg', 'div');\n      errorMsgEl.innerText = (_this$instance$option = (_this$instance$option2 = this.instance.options) === null || _this$instance$option2 === void 0 ? void 0 : _this$instance$option2.errorMsg) !== null && _this$instance$option !== void 0 ? _this$instance$option : '';\n      errorMsgEl =\n      /** @type {HTMLDivElement} */\n      this.instance.applyFilters('contentErrorElement', errorMsgEl, this);\n      this.element = createElement('pswp__content pswp__error-msg-container', 'div');\n      this.element.appendChild(errorMsgEl);\n      this.slide.container.innerText = '';\n      this.slide.container.appendChild(this.element);\n      this.slide.updateContentSize(true);\n      this.removePlaceholder();\n    }\n  }\n  /**\r\n   * Append the content\r\n   */\n\n\n  append() {\n    if (this.isAttached || !this.element) {\n      return;\n    }\n\n    this.isAttached = true;\n\n    if (this.state === LOAD_STATE.ERROR) {\n      this.displayError();\n      return;\n    }\n\n    if (this.instance.dispatch('contentAppend', {\n      content: this\n    }).defaultPrevented) {\n      return;\n    }\n\n    const supportsDecode = ('decode' in this.element);\n\n    if (this.isImageContent()) {\n      // Use decode() on nearby slides\n      //\n      // Nearby slide images are in DOM and not hidden via display:none.\n      // However, they are placed offscreen (to the left and right side).\n      //\n      // Some browsers do not composite the image until it's actually visible,\n      // using decode() helps.\n      //\n      // You might ask \"why dont you just decode() and then append all images\",\n      // that's because I want to show image before it's fully loaded,\n      // as browser can render parts of image while it is loading.\n      // We do not do this in Safari due to partial loading bug.\n      if (supportsDecode && this.slide && (!this.slide.isActive || isSafari())) {\n        this.isDecoding = true; // purposefully using finally instead of then,\n        // as if srcset sizes changes dynamically - it may cause decode error\n\n        /** @type {HTMLImageElement} */\n\n        this.element.decode().catch(() => {}).finally(() => {\n          this.isDecoding = false;\n          this.appendImage();\n        });\n      } else {\n        this.appendImage();\n      }\n    } else if (this.slide && !this.element.parentNode) {\n      this.slide.container.appendChild(this.element);\n    }\n  }\n  /**\r\n   * Activate the slide,\r\n   * active slide is generally the current one,\r\n   * meaning the user can see it.\r\n   */\n\n\n  activate() {\n    if (this.instance.dispatch('contentActivate', {\n      content: this\n    }).defaultPrevented || !this.slide) {\n      return;\n    }\n\n    if (this.isImageContent() && this.isDecoding && !isSafari()) {\n      // add image to slide when it becomes active,\n      // even if it's not finished decoding\n      this.appendImage();\n    } else if (this.isError()) {\n      this.load(false, true); // try to reload\n    }\n\n    if (this.slide.holderElement) {\n      this.slide.holderElement.setAttribute('aria-hidden', 'false');\n    }\n  }\n  /**\r\n   * Deactivate the content\r\n   */\n\n\n  deactivate() {\n    this.instance.dispatch('contentDeactivate', {\n      content: this\n    });\n\n    if (this.slide && this.slide.holderElement) {\n      this.slide.holderElement.setAttribute('aria-hidden', 'true');\n    }\n  }\n  /**\r\n   * Remove the content from DOM\r\n   */\n\n\n  remove() {\n    this.isAttached = false;\n\n    if (this.instance.dispatch('contentRemove', {\n      content: this\n    }).defaultPrevented) {\n      return;\n    }\n\n    if (this.element && this.element.parentNode) {\n      this.element.remove();\n    }\n\n    if (this.placeholder && this.placeholder.element) {\n      this.placeholder.element.remove();\n    }\n  }\n  /**\r\n   * Append the image content to slide container\r\n   */\n\n\n  appendImage() {\n    if (!this.isAttached) {\n      return;\n    }\n\n    if (this.instance.dispatch('contentAppendImage', {\n      content: this\n    }).defaultPrevented) {\n      return;\n    } // ensure that element exists and is not already appended\n\n\n    if (this.slide && this.element && !this.element.parentNode) {\n      this.slide.container.appendChild(this.element);\n    }\n\n    if (this.state === LOAD_STATE.LOADED || this.state === LOAD_STATE.ERROR) {\n      this.removePlaceholder();\n    }\n  }\n\n}\n\n/** @typedef {import('./content.js').default} Content */\n\n/** @typedef {import('./slide.js').default} Slide */\n\n/** @typedef {import('./slide.js').SlideData} SlideData */\n\n/** @typedef {import('../core/base.js').default} PhotoSwipeBase */\n\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\n\nconst MIN_SLIDES_TO_CACHE = 5;\n/**\r\n * Lazy-load an image\r\n * This function is used both by Lightbox and PhotoSwipe core,\r\n * thus it can be called before dialog is opened.\r\n *\r\n * @param {SlideData} itemData Data about the slide\r\n * @param {PhotoSwipeBase} instance PhotoSwipe or PhotoSwipeLightbox instance\r\n * @param {number} index\r\n * @returns {Content} Image that is being decoded or false.\r\n */\n\nfunction lazyLoadData(itemData, instance, index) {\n  const content = instance.createContentFromData(itemData, index);\n  /** @type {ZoomLevel | undefined} */\n\n  let zoomLevel;\n  const {\n    options\n  } = instance; // We need to know dimensions of the image to preload it,\n  // as it might use srcset, and we need to define sizes\n\n  if (options) {\n    zoomLevel = new ZoomLevel(options, itemData, -1);\n    let viewportSize;\n\n    if (instance.pswp) {\n      viewportSize = instance.pswp.viewportSize;\n    } else {\n      viewportSize = getViewportSize(options, instance);\n    }\n\n    const panAreaSize = getPanAreaSize(options, viewportSize, itemData, index);\n    zoomLevel.update(content.width, content.height, panAreaSize);\n  }\n\n  content.lazyLoad();\n\n  if (zoomLevel) {\n    content.setDisplayedSize(Math.ceil(content.width * zoomLevel.initial), Math.ceil(content.height * zoomLevel.initial));\n  }\n\n  return content;\n}\n/**\r\n * Lazy-loads specific slide.\r\n * This function is used both by Lightbox and PhotoSwipe core,\r\n * thus it can be called before dialog is opened.\r\n *\r\n * By default, it loads image based on viewport size and initial zoom level.\r\n *\r\n * @param {number} index Slide index\r\n * @param {PhotoSwipeBase} instance PhotoSwipe or PhotoSwipeLightbox eventable instance\r\n * @returns {Content | undefined}\r\n */\n\nfunction lazyLoadSlide(index, instance) {\n  const itemData = instance.getItemData(index);\n\n  if (instance.dispatch('lazyLoadSlide', {\n    index,\n    itemData\n  }).defaultPrevented) {\n    return;\n  }\n\n  return lazyLoadData(itemData, instance, index);\n}\n\nclass ContentLoader {\n  /**\r\n   * @param {PhotoSwipe} pswp\r\n   */\n  constructor(pswp) {\n    this.pswp = pswp; // Total amount of cached images\n\n    this.limit = Math.max(pswp.options.preload[0] + pswp.options.preload[1] + 1, MIN_SLIDES_TO_CACHE);\n    /** @type {Content[]} */\n\n    this._cachedItems = [];\n  }\n  /**\r\n   * Lazy load nearby slides based on `preload` option.\r\n   *\r\n   * @param {number} [diff] Difference between slide indexes that was changed recently, or 0.\r\n   */\n\n\n  updateLazy(diff) {\n    const {\n      pswp\n    } = this;\n\n    if (pswp.dispatch('lazyLoad').defaultPrevented) {\n      return;\n    }\n\n    const {\n      preload\n    } = pswp.options;\n    const isForward = diff === undefined ? true : diff >= 0;\n    let i; // preload[1] - num items to preload in forward direction\n\n    for (i = 0; i <= preload[1]; i++) {\n      this.loadSlideByIndex(pswp.currIndex + (isForward ? i : -i));\n    } // preload[0] - num items to preload in backward direction\n\n\n    for (i = 1; i <= preload[0]; i++) {\n      this.loadSlideByIndex(pswp.currIndex + (isForward ? -i : i));\n    }\n  }\n  /**\r\n   * @param {number} initialIndex\r\n   */\n\n\n  loadSlideByIndex(initialIndex) {\n    const index = this.pswp.getLoopedIndex(initialIndex); // try to get cached content\n\n    let content = this.getContentByIndex(index);\n\n    if (!content) {\n      // no cached content, so try to load from scratch:\n      content = lazyLoadSlide(index, this.pswp); // if content can be loaded, add it to cache:\n\n      if (content) {\n        this.addToCache(content);\n      }\n    }\n  }\n  /**\r\n   * @param {Slide} slide\r\n   * @returns {Content}\r\n   */\n\n\n  getContentBySlide(slide) {\n    let content = this.getContentByIndex(slide.index);\n\n    if (!content) {\n      // create content if not found in cache\n      content = this.pswp.createContentFromData(slide.data, slide.index);\n      this.addToCache(content);\n    } // assign slide to content\n\n\n    content.setSlide(slide);\n    return content;\n  }\n  /**\r\n   * @param {Content} content\r\n   */\n\n\n  addToCache(content) {\n    // move to the end of array\n    this.removeByIndex(content.index);\n\n    this._cachedItems.push(content);\n\n    if (this._cachedItems.length > this.limit) {\n      // Destroy the first content that's not attached\n      const indexToRemove = this._cachedItems.findIndex(item => {\n        return !item.isAttached && !item.hasSlide;\n      });\n\n      if (indexToRemove !== -1) {\n        const removedItem = this._cachedItems.splice(indexToRemove, 1)[0];\n\n        removedItem.destroy();\n      }\n    }\n  }\n  /**\r\n   * Removes an image from cache, does not destroy() it, just removes.\r\n   *\r\n   * @param {number} index\r\n   */\n\n\n  removeByIndex(index) {\n    const indexToRemove = this._cachedItems.findIndex(item => item.index === index);\n\n    if (indexToRemove !== -1) {\n      this._cachedItems.splice(indexToRemove, 1);\n    }\n  }\n  /**\r\n   * @param {number} index\r\n   * @returns {Content | undefined}\r\n   */\n\n\n  getContentByIndex(index) {\n    return this._cachedItems.find(content => content.index === index);\n  }\n\n  destroy() {\n    this._cachedItems.forEach(content => content.destroy());\n\n    this._cachedItems = [];\n  }\n\n}\n\n/** @typedef {import(\"../photoswipe.js\").default} PhotoSwipe */\n\n/** @typedef {import(\"../slide/slide.js\").SlideData} SlideData */\n\n/**\r\n * PhotoSwipe base class that can retrieve data about every slide.\r\n * Shared by PhotoSwipe Core and PhotoSwipe Lightbox\r\n */\n\nclass PhotoSwipeBase extends Eventable {\n  /**\r\n   * Get total number of slides\r\n   *\r\n   * @returns {number}\r\n   */\n  getNumItems() {\n    var _this$options;\n\n    let numItems = 0;\n    const dataSource = (_this$options = this.options) === null || _this$options === void 0 ? void 0 : _this$options.dataSource;\n\n    if (dataSource && 'length' in dataSource) {\n      // may be an array or just object with length property\n      numItems = dataSource.length;\n    } else if (dataSource && 'gallery' in dataSource) {\n      // query DOM elements\n      if (!dataSource.items) {\n        dataSource.items = this._getGalleryDOMElements(dataSource.gallery);\n      }\n\n      if (dataSource.items) {\n        numItems = dataSource.items.length;\n      }\n    } // legacy event, before filters were introduced\n\n\n    const event = this.dispatch('numItems', {\n      dataSource,\n      numItems\n    });\n    return this.applyFilters('numItems', event.numItems, dataSource);\n  }\n  /**\r\n   * @param {SlideData} slideData\r\n   * @param {number} index\r\n   * @returns {Content}\r\n   */\n\n\n  createContentFromData(slideData, index) {\n    return new Content(slideData, this, index);\n  }\n  /**\r\n   * Get item data by index.\r\n   *\r\n   * \"item data\" should contain normalized information that PhotoSwipe needs to generate a slide.\r\n   * For example, it may contain properties like\r\n   * `src`, `srcset`, `w`, `h`, which will be used to generate a slide with image.\r\n   *\r\n   * @param {number} index\r\n   * @returns {SlideData}\r\n   */\n\n\n  getItemData(index) {\n    var _this$options2;\n\n    const dataSource = (_this$options2 = this.options) === null || _this$options2 === void 0 ? void 0 : _this$options2.dataSource;\n    /** @type {SlideData | HTMLElement} */\n\n    let dataSourceItem = {};\n\n    if (Array.isArray(dataSource)) {\n      // Datasource is an array of elements\n      dataSourceItem = dataSource[index];\n    } else if (dataSource && 'gallery' in dataSource) {\n      // dataSource has gallery property,\n      // thus it was created by Lightbox, based on\n      // gallery and children options\n      // query DOM elements\n      if (!dataSource.items) {\n        dataSource.items = this._getGalleryDOMElements(dataSource.gallery);\n      }\n\n      dataSourceItem = dataSource.items[index];\n    }\n\n    let itemData = dataSourceItem;\n\n    if (itemData instanceof Element) {\n      itemData = this._domElementToItemData(itemData);\n    } // Dispatching the itemData event,\n    // it's a legacy verion before filters were introduced\n\n\n    const event = this.dispatch('itemData', {\n      itemData: itemData || {},\n      index\n    });\n    return this.applyFilters('itemData', event.itemData, index);\n  }\n  /**\r\n   * Get array of gallery DOM elements,\r\n   * based on childSelector and gallery element.\r\n   *\r\n   * @param {HTMLElement} galleryElement\r\n   * @returns {HTMLElement[]}\r\n   */\n\n\n  _getGalleryDOMElements(galleryElement) {\n    var _this$options3, _this$options4;\n\n    if ((_this$options3 = this.options) !== null && _this$options3 !== void 0 && _this$options3.children || (_this$options4 = this.options) !== null && _this$options4 !== void 0 && _this$options4.childSelector) {\n      return getElementsFromOption(this.options.children, this.options.childSelector, galleryElement) || [];\n    }\n\n    return [galleryElement];\n  }\n  /**\r\n   * Converts DOM element to item data object.\r\n   *\r\n   * @param {HTMLElement} element DOM element\r\n   * @returns {SlideData}\r\n   */\n\n\n  _domElementToItemData(element) {\n    /** @type {SlideData} */\n    const itemData = {\n      element\n    };\n    const linkEl =\n    /** @type {HTMLAnchorElement} */\n    element.tagName === 'A' ? element : element.querySelector('a');\n\n    if (linkEl) {\n      // src comes from data-pswp-src attribute,\n      // if it's empty link href is used\n      itemData.src = linkEl.dataset.pswpSrc || linkEl.href;\n\n      if (linkEl.dataset.pswpSrcset) {\n        itemData.srcset = linkEl.dataset.pswpSrcset;\n      }\n\n      itemData.width = linkEl.dataset.pswpWidth ? parseInt(linkEl.dataset.pswpWidth, 10) : 0;\n      itemData.height = linkEl.dataset.pswpHeight ? parseInt(linkEl.dataset.pswpHeight, 10) : 0; // support legacy w & h properties\n\n      itemData.w = itemData.width;\n      itemData.h = itemData.height;\n\n      if (linkEl.dataset.pswpType) {\n        itemData.type = linkEl.dataset.pswpType;\n      }\n\n      const thumbnailEl = element.querySelector('img');\n\n      if (thumbnailEl) {\n        var _thumbnailEl$getAttri;\n\n        // msrc is URL to placeholder image that's displayed before large image is loaded\n        // by default it's displayed only for the first slide\n        itemData.msrc = thumbnailEl.currentSrc || thumbnailEl.src;\n        itemData.alt = (_thumbnailEl$getAttri = thumbnailEl.getAttribute('alt')) !== null && _thumbnailEl$getAttri !== void 0 ? _thumbnailEl$getAttri : '';\n      }\n\n      if (linkEl.dataset.pswpCropped || linkEl.dataset.cropped) {\n        itemData.thumbCropped = true;\n      }\n    }\n\n    return this.applyFilters('domItemData', itemData, element, linkEl);\n  }\n  /**\r\n   * Lazy-load by slide data\r\n   *\r\n   * @param {SlideData} itemData Data about the slide\r\n   * @param {number} index\r\n   * @returns {Content} Image that is being decoded or false.\r\n   */\n\n\n  lazyLoadData(itemData, index) {\n    return lazyLoadData(itemData, this, index);\n  }\n\n}\n\n/** @typedef {import('./photoswipe.js').default} PhotoSwipe */\n\n/** @typedef {import('./slide/get-thumb-bounds.js').Bounds} Bounds */\n\n/** @typedef {import('./util/animations.js').AnimationProps} AnimationProps */\n// some browsers do not paint\n// elements which opacity is set to 0,\n// since we need to pre-render elements for the animation -\n// we set it to the minimum amount\n\nconst MIN_OPACITY = 0.003;\n/**\r\n * Manages opening and closing transitions of the PhotoSwipe.\r\n *\r\n * It can perform zoom, fade or no transition.\r\n */\n\nclass Opener {\n  /**\r\n   * @param {PhotoSwipe} pswp\r\n   */\n  constructor(pswp) {\n    this.pswp = pswp;\n    this.isClosed = true;\n    this.isOpen = false;\n    this.isClosing = false;\n    this.isOpening = false;\n    /**\r\n     * @private\r\n     * @type {number | false | undefined}\r\n     */\n\n    this._duration = undefined;\n    /** @private */\n\n    this._useAnimation = false;\n    /** @private */\n\n    this._croppedZoom = false;\n    /** @private */\n\n    this._animateRootOpacity = false;\n    /** @private */\n\n    this._animateBgOpacity = false;\n    /**\r\n     * @private\r\n     * @type { HTMLDivElement | HTMLImageElement | null | undefined }\r\n     */\n\n    this._placeholder = undefined;\n    /**\r\n     * @private\r\n     * @type { HTMLDivElement | undefined }\r\n     */\n\n    this._opacityElement = undefined;\n    /**\r\n     * @private\r\n     * @type { HTMLDivElement | undefined }\r\n     */\n\n    this._cropContainer1 = undefined;\n    /**\r\n     * @private\r\n     * @type { HTMLElement | null | undefined }\r\n     */\n\n    this._cropContainer2 = undefined;\n    /**\r\n     * @private\r\n     * @type {Bounds | undefined}\r\n     */\n\n    this._thumbBounds = undefined;\n    this._prepareOpen = this._prepareOpen.bind(this); // Override initial zoom and pan position\n\n    pswp.on('firstZoomPan', this._prepareOpen);\n  }\n\n  open() {\n    this._prepareOpen();\n\n    this._start();\n  }\n\n  close() {\n    if (this.isClosed || this.isClosing || this.isOpening) {\n      // if we close during opening animation\n      // for now do nothing,\n      // browsers aren't good at changing the direction of the CSS transition\n      return;\n    }\n\n    const slide = this.pswp.currSlide;\n    this.isOpen = false;\n    this.isOpening = false;\n    this.isClosing = true;\n    this._duration = this.pswp.options.hideAnimationDuration;\n\n    if (slide && slide.currZoomLevel * slide.width >= this.pswp.options.maxWidthToAnimate) {\n      this._duration = 0;\n    }\n\n    this._applyStartProps();\n\n    setTimeout(() => {\n      this._start();\n    }, this._croppedZoom ? 30 : 0);\n  }\n  /** @private */\n\n\n  _prepareOpen() {\n    this.pswp.off('firstZoomPan', this._prepareOpen);\n\n    if (!this.isOpening) {\n      const slide = this.pswp.currSlide;\n      this.isOpening = true;\n      this.isClosing = false;\n      this._duration = this.pswp.options.showAnimationDuration;\n\n      if (slide && slide.zoomLevels.initial * slide.width >= this.pswp.options.maxWidthToAnimate) {\n        this._duration = 0;\n      }\n\n      this._applyStartProps();\n    }\n  }\n  /** @private */\n\n\n  _applyStartProps() {\n    const {\n      pswp\n    } = this;\n    const slide = this.pswp.currSlide;\n    const {\n      options\n    } = pswp;\n\n    if (options.showHideAnimationType === 'fade') {\n      options.showHideOpacity = true;\n      this._thumbBounds = undefined;\n    } else if (options.showHideAnimationType === 'none') {\n      options.showHideOpacity = false;\n      this._duration = 0;\n      this._thumbBounds = undefined;\n    } else if (this.isOpening && pswp._initialThumbBounds) {\n      // Use initial bounds if defined\n      this._thumbBounds = pswp._initialThumbBounds;\n    } else {\n      this._thumbBounds = this.pswp.getThumbBounds();\n    }\n\n    this._placeholder = slide === null || slide === void 0 ? void 0 : slide.getPlaceholderElement();\n    pswp.animations.stopAll(); // Discard animations when duration is less than 50ms\n\n    this._useAnimation = Boolean(this._duration && this._duration > 50);\n    this._animateZoom = Boolean(this._thumbBounds) && (slide === null || slide === void 0 ? void 0 : slide.content.usePlaceholder()) && (!this.isClosing || !pswp.mainScroll.isShifted());\n\n    if (!this._animateZoom) {\n      this._animateRootOpacity = true;\n\n      if (this.isOpening && slide) {\n        slide.zoomAndPanToInitial();\n        slide.applyCurrentZoomPan();\n      }\n    } else {\n      var _options$showHideOpac;\n\n      this._animateRootOpacity = (_options$showHideOpac = options.showHideOpacity) !== null && _options$showHideOpac !== void 0 ? _options$showHideOpac : false;\n    }\n\n    this._animateBgOpacity = !this._animateRootOpacity && this.pswp.options.bgOpacity > MIN_OPACITY;\n    this._opacityElement = this._animateRootOpacity ? pswp.element : pswp.bg;\n\n    if (!this._useAnimation) {\n      this._duration = 0;\n      this._animateZoom = false;\n      this._animateBgOpacity = false;\n      this._animateRootOpacity = true;\n\n      if (this.isOpening) {\n        if (pswp.element) {\n          pswp.element.style.opacity = String(MIN_OPACITY);\n        }\n\n        pswp.applyBgOpacity(1);\n      }\n\n      return;\n    }\n\n    if (this._animateZoom && this._thumbBounds && this._thumbBounds.innerRect) {\n      var _this$pswp$currSlide;\n\n      // Properties are used when animation from cropped thumbnail\n      this._croppedZoom = true;\n      this._cropContainer1 = this.pswp.container;\n      this._cropContainer2 = (_this$pswp$currSlide = this.pswp.currSlide) === null || _this$pswp$currSlide === void 0 ? void 0 : _this$pswp$currSlide.holderElement;\n\n      if (pswp.container) {\n        pswp.container.style.overflow = 'hidden';\n        pswp.container.style.width = pswp.viewportSize.x + 'px';\n      }\n    } else {\n      this._croppedZoom = false;\n    }\n\n    if (this.isOpening) {\n      // Apply styles before opening transition\n      if (this._animateRootOpacity) {\n        if (pswp.element) {\n          pswp.element.style.opacity = String(MIN_OPACITY);\n        }\n\n        pswp.applyBgOpacity(1);\n      } else {\n        if (this._animateBgOpacity && pswp.bg) {\n          pswp.bg.style.opacity = String(MIN_OPACITY);\n        }\n\n        if (pswp.element) {\n          pswp.element.style.opacity = '1';\n        }\n      }\n\n      if (this._animateZoom) {\n        this._setClosedStateZoomPan();\n\n        if (this._placeholder) {\n          // tell browser that we plan to animate the placeholder\n          this._placeholder.style.willChange = 'transform'; // hide placeholder to allow hiding of\n          // elements that overlap it (such as icons over the thumbnail)\n\n          this._placeholder.style.opacity = String(MIN_OPACITY);\n        }\n      }\n    } else if (this.isClosing) {\n      // hide nearby slides to make sure that\n      // they are not painted during the transition\n      if (pswp.mainScroll.itemHolders[0]) {\n        pswp.mainScroll.itemHolders[0].el.style.display = 'none';\n      }\n\n      if (pswp.mainScroll.itemHolders[2]) {\n        pswp.mainScroll.itemHolders[2].el.style.display = 'none';\n      }\n\n      if (this._croppedZoom) {\n        if (pswp.mainScroll.x !== 0) {\n          // shift the main scroller to zero position\n          pswp.mainScroll.resetPosition();\n          pswp.mainScroll.resize();\n        }\n      }\n    }\n  }\n  /** @private */\n\n\n  _start() {\n    if (this.isOpening && this._useAnimation && this._placeholder && this._placeholder.tagName === 'IMG') {\n      // To ensure smooth animation\n      // we wait till the current slide image placeholder is decoded,\n      // but no longer than 250ms,\n      // and no shorter than 50ms\n      // (just using requestanimationframe is not enough in Firefox,\n      // for some reason)\n      new Promise(resolve => {\n        let decoded = false;\n        let isDelaying = true;\n        decodeImage(\n        /** @type {HTMLImageElement} */\n        this._placeholder).finally(() => {\n          decoded = true;\n\n          if (!isDelaying) {\n            resolve(true);\n          }\n        });\n        setTimeout(() => {\n          isDelaying = false;\n\n          if (decoded) {\n            resolve(true);\n          }\n        }, 50);\n        setTimeout(resolve, 250);\n      }).finally(() => this._initiate());\n    } else {\n      this._initiate();\n    }\n  }\n  /** @private */\n\n\n  _initiate() {\n    var _this$pswp$element, _this$pswp$element2;\n\n    (_this$pswp$element = this.pswp.element) === null || _this$pswp$element === void 0 || _this$pswp$element.style.setProperty('--pswp-transition-duration', this._duration + 'ms');\n    this.pswp.dispatch(this.isOpening ? 'openingAnimationStart' : 'closingAnimationStart'); // legacy event\n\n    this.pswp.dispatch(\n    /** @type {'initialZoomIn' | 'initialZoomOut'} */\n    'initialZoom' + (this.isOpening ? 'In' : 'Out'));\n    (_this$pswp$element2 = this.pswp.element) === null || _this$pswp$element2 === void 0 || _this$pswp$element2.classList.toggle('pswp--ui-visible', this.isOpening);\n\n    if (this.isOpening) {\n      if (this._placeholder) {\n        // unhide the placeholder\n        this._placeholder.style.opacity = '1';\n      }\n\n      this._animateToOpenState();\n    } else if (this.isClosing) {\n      this._animateToClosedState();\n    }\n\n    if (!this._useAnimation) {\n      this._onAnimationComplete();\n    }\n  }\n  /** @private */\n\n\n  _onAnimationComplete() {\n    const {\n      pswp\n    } = this;\n    this.isOpen = this.isOpening;\n    this.isClosed = this.isClosing;\n    this.isOpening = false;\n    this.isClosing = false;\n    pswp.dispatch(this.isOpen ? 'openingAnimationEnd' : 'closingAnimationEnd'); // legacy event\n\n    pswp.dispatch(\n    /** @type {'initialZoomInEnd' | 'initialZoomOutEnd'} */\n    'initialZoom' + (this.isOpen ? 'InEnd' : 'OutEnd'));\n\n    if (this.isClosed) {\n      pswp.destroy();\n    } else if (this.isOpen) {\n      var _pswp$currSlide;\n\n      if (this._animateZoom && pswp.container) {\n        pswp.container.style.overflow = 'visible';\n        pswp.container.style.width = '100%';\n      }\n\n      (_pswp$currSlide = pswp.currSlide) === null || _pswp$currSlide === void 0 || _pswp$currSlide.applyCurrentZoomPan();\n    }\n  }\n  /** @private */\n\n\n  _animateToOpenState() {\n    const {\n      pswp\n    } = this;\n\n    if (this._animateZoom) {\n      if (this._croppedZoom && this._cropContainer1 && this._cropContainer2) {\n        this._animateTo(this._cropContainer1, 'transform', 'translate3d(0,0,0)');\n\n        this._animateTo(this._cropContainer2, 'transform', 'none');\n      }\n\n      if (pswp.currSlide) {\n        pswp.currSlide.zoomAndPanToInitial();\n\n        this._animateTo(pswp.currSlide.container, 'transform', pswp.currSlide.getCurrentTransform());\n      }\n    }\n\n    if (this._animateBgOpacity && pswp.bg) {\n      this._animateTo(pswp.bg, 'opacity', String(pswp.options.bgOpacity));\n    }\n\n    if (this._animateRootOpacity && pswp.element) {\n      this._animateTo(pswp.element, 'opacity', '1');\n    }\n  }\n  /** @private */\n\n\n  _animateToClosedState() {\n    const {\n      pswp\n    } = this;\n\n    if (this._animateZoom) {\n      this._setClosedStateZoomPan(true);\n    } // do not animate opacity if it's already at 0\n\n\n    if (this._animateBgOpacity && pswp.bgOpacity > 0.01 && pswp.bg) {\n      this._animateTo(pswp.bg, 'opacity', '0');\n    }\n\n    if (this._animateRootOpacity && pswp.element) {\n      this._animateTo(pswp.element, 'opacity', '0');\n    }\n  }\n  /**\r\n   * @private\r\n   * @param {boolean} [animate]\r\n   */\n\n\n  _setClosedStateZoomPan(animate) {\n    if (!this._thumbBounds) return;\n    const {\n      pswp\n    } = this;\n    const {\n      innerRect\n    } = this._thumbBounds;\n    const {\n      currSlide,\n      viewportSize\n    } = pswp;\n\n    if (this._croppedZoom && innerRect && this._cropContainer1 && this._cropContainer2) {\n      const containerOnePanX = -viewportSize.x + (this._thumbBounds.x - innerRect.x) + innerRect.w;\n      const containerOnePanY = -viewportSize.y + (this._thumbBounds.y - innerRect.y) + innerRect.h;\n      const containerTwoPanX = viewportSize.x - innerRect.w;\n      const containerTwoPanY = viewportSize.y - innerRect.h;\n\n      if (animate) {\n        this._animateTo(this._cropContainer1, 'transform', toTransformString(containerOnePanX, containerOnePanY));\n\n        this._animateTo(this._cropContainer2, 'transform', toTransformString(containerTwoPanX, containerTwoPanY));\n      } else {\n        setTransform(this._cropContainer1, containerOnePanX, containerOnePanY);\n        setTransform(this._cropContainer2, containerTwoPanX, containerTwoPanY);\n      }\n    }\n\n    if (currSlide) {\n      equalizePoints(currSlide.pan, innerRect || this._thumbBounds);\n      currSlide.currZoomLevel = this._thumbBounds.w / currSlide.width;\n\n      if (animate) {\n        this._animateTo(currSlide.container, 'transform', currSlide.getCurrentTransform());\n      } else {\n        currSlide.applyCurrentZoomPan();\n      }\n    }\n  }\n  /**\r\n   * @private\r\n   * @param {HTMLElement} target\r\n   * @param {'transform' | 'opacity'} prop\r\n   * @param {string} propValue\r\n   */\n\n\n  _animateTo(target, prop, propValue) {\n    if (!this._duration) {\n      target.style[prop] = propValue;\n      return;\n    }\n\n    const {\n      animations\n    } = this.pswp;\n    /** @type {AnimationProps} */\n\n    const animProps = {\n      duration: this._duration,\n      easing: this.pswp.options.easing,\n      onComplete: () => {\n        if (!animations.activeAnimations.length) {\n          this._onAnimationComplete();\n        }\n      },\n      target\n    };\n    animProps[prop] = propValue;\n    animations.startTransition(animProps);\n  }\n\n}\n\n/**\r\n * @template T\r\n * @typedef {import('./types.js').Type<T>} Type<T>\r\n */\n\n/** @typedef {import('./slide/slide.js').SlideData} SlideData */\n\n/** @typedef {import('./slide/zoom-level.js').ZoomLevelOption} ZoomLevelOption */\n\n/** @typedef {import('./ui/ui-element.js').UIElementData} UIElementData */\n\n/** @typedef {import('./main-scroll.js').ItemHolder} ItemHolder */\n\n/** @typedef {import('./core/eventable.js').PhotoSwipeEventsMap} PhotoSwipeEventsMap */\n\n/** @typedef {import('./core/eventable.js').PhotoSwipeFiltersMap} PhotoSwipeFiltersMap */\n\n/** @typedef {import('./slide/get-thumb-bounds').Bounds} Bounds */\n\n/**\r\n * @template {keyof PhotoSwipeEventsMap} T\r\n * @typedef {import('./core/eventable.js').EventCallback<T>} EventCallback<T>\r\n */\n\n/**\r\n * @template {keyof PhotoSwipeEventsMap} T\r\n * @typedef {import('./core/eventable.js').AugmentedEvent<T>} AugmentedEvent<T>\r\n */\n\n/** @typedef {{ x: number; y: number; id?: string | number }} Point */\n\n/** @typedef {{ top: number; bottom: number; left: number; right: number }} Padding */\n\n/** @typedef {SlideData[]} DataSourceArray */\n\n/** @typedef {{ gallery: HTMLElement; items?: HTMLElement[] }} DataSourceObject */\n\n/** @typedef {DataSourceArray | DataSourceObject} DataSource */\n\n/** @typedef {(point: Point, originalEvent: PointerEvent) => void} ActionFn */\n\n/** @typedef {'close' | 'next' | 'zoom' | 'zoom-or-close' | 'toggle-controls'} ActionType */\n\n/** @typedef {Type<PhotoSwipe> | { default: Type<PhotoSwipe> }} PhotoSwipeModule */\n\n/** @typedef {PhotoSwipeModule | Promise<PhotoSwipeModule> | (() => Promise<PhotoSwipeModule>)} PhotoSwipeModuleOption */\n\n/**\r\n * @typedef {string | NodeListOf<HTMLElement> | HTMLElement[] | HTMLElement} ElementProvider\r\n */\n\n/** @typedef {Partial<PreparedPhotoSwipeOptions>} PhotoSwipeOptions https://photoswipe.com/options/ */\n\n/**\r\n * @typedef {Object} PreparedPhotoSwipeOptions\r\n *\r\n * @prop {DataSource} [dataSource]\r\n * Pass an array of any items via dataSource option. Its length will determine amount of slides\r\n * (which may be modified further from numItems event).\r\n *\r\n * Each item should contain data that you need to generate slide\r\n * (for image slide it would be src (image URL), width (image width), height, srcset, alt).\r\n *\r\n * If these properties are not present in your initial array, you may \"pre-parse\" each item from itemData filter.\r\n *\r\n * @prop {number} bgOpacity\r\n * Background backdrop opacity, always define it via this option and not via CSS rgba color.\r\n *\r\n * @prop {number} spacing\r\n * Spacing between slides. Defined as ratio relative to the viewport width (0.1 = 10% of viewport).\r\n *\r\n * @prop {boolean} allowPanToNext\r\n * Allow swipe navigation to the next slide when the current slide is zoomed. Does not apply to mouse events.\r\n *\r\n * @prop {boolean} loop\r\n * If set to true you'll be able to swipe from the last to the first image.\r\n * Option is always false when there are less than 3 slides.\r\n *\r\n * @prop {boolean} [wheelToZoom]\r\n * By default PhotoSwipe zooms image with ctrl-wheel, if you enable this option - image will zoom just via wheel.\r\n *\r\n * @prop {boolean} pinchToClose\r\n * Pinch touch gesture to close the gallery.\r\n *\r\n * @prop {boolean} closeOnVerticalDrag\r\n * Vertical drag gesture to close the PhotoSwipe.\r\n *\r\n * @prop {Padding} [padding]\r\n * Slide area padding (in pixels).\r\n *\r\n * @prop {(viewportSize: Point, itemData: SlideData, index: number) => Padding} [paddingFn]\r\n * The option is checked frequently, so make sure it's performant. Overrides padding option if defined. For example:\r\n *\r\n * @prop {number | false} hideAnimationDuration\r\n * Transition duration in milliseconds, can be 0.\r\n *\r\n * @prop {number | false} showAnimationDuration\r\n * Transition duration in milliseconds, can be 0.\r\n *\r\n * @prop {number | false} zoomAnimationDuration\r\n * Transition duration in milliseconds, can be 0.\r\n *\r\n * @prop {string} easing\r\n * String, 'cubic-bezier(.4,0,.22,1)'. CSS easing function for open/close/zoom transitions.\r\n *\r\n * @prop {boolean} escKey\r\n * Esc key to close.\r\n *\r\n * @prop {boolean} arrowKeys\r\n * Left/right arrow keys for navigation.\r\n *\r\n * @prop {boolean} trapFocus\r\n * Trap focus within PhotoSwipe element while it's open.\r\n *\r\n * @prop {boolean} returnFocus\r\n * Restore focus the last active element after PhotoSwipe is closed.\r\n *\r\n * @prop {boolean} clickToCloseNonZoomable\r\n * If image is not zoomable (for example, smaller than viewport) it can be closed by clicking on it.\r\n *\r\n * @prop {ActionType | ActionFn | false} imageClickAction\r\n * Refer to click and tap actions page.\r\n *\r\n * @prop {ActionType | ActionFn | false} bgClickAction\r\n * Refer to click and tap actions page.\r\n *\r\n * @prop {ActionType | ActionFn | false} tapAction\r\n * Refer to click and tap actions page.\r\n *\r\n * @prop {ActionType | ActionFn | false} doubleTapAction\r\n * Refer to click and tap actions page.\r\n *\r\n * @prop {number} preloaderDelay\r\n * Delay before the loading indicator will be displayed,\r\n * if image is loaded during it - the indicator will not be displayed at all. Can be zero.\r\n *\r\n * @prop {string} indexIndicatorSep\r\n * Used for slide count indicator (\"1 of 10 \").\r\n *\r\n * @prop {(options: PhotoSwipeOptions, pswp: PhotoSwipeBase) => Point} [getViewportSizeFn]\r\n * A function that should return slide viewport width and height, in format {x: 100, y: 100}.\r\n *\r\n * @prop {string} errorMsg\r\n * Message to display when the image wasn't able to load. If you need to display HTML - use contentErrorElement filter.\r\n *\r\n * @prop {[number, number]} preload\r\n * Lazy loading of nearby slides based on direction of movement. Should be an array with two integers,\r\n * first one - number of items to preload before the current image, second one - after the current image.\r\n * Two nearby images are always loaded.\r\n *\r\n * @prop {string} [mainClass]\r\n * Class that will be added to the root element of PhotoSwipe, may contain multiple separated by space.\r\n * Example on Styling page.\r\n *\r\n * @prop {HTMLElement} [appendToEl]\r\n * Element to which PhotoSwipe dialog will be appended when it opens.\r\n *\r\n * @prop {number} maxWidthToAnimate\r\n * Maximum width of image to animate, if initial rendered image width\r\n * is larger than this value - the opening/closing transition will be automatically disabled.\r\n *\r\n * @prop {string} [closeTitle]\r\n * Translating\r\n *\r\n * @prop {string} [zoomTitle]\r\n * Translating\r\n *\r\n * @prop {string} [arrowPrevTitle]\r\n * Translating\r\n *\r\n * @prop {string} [arrowNextTitle]\r\n * Translating\r\n *\r\n * @prop {'zoom' | 'fade' | 'none'} [showHideAnimationType]\r\n * To adjust opening or closing transition type use lightbox option `showHideAnimationType` (`String`).\r\n * It supports three values - `zoom` (default), `fade` (default if there is no thumbnail) and `none`.\r\n *\r\n * Animations are automatically disabled if user `(prefers-reduced-motion: reduce)`.\r\n *\r\n * @prop {number} index\r\n * Defines start slide index.\r\n *\r\n * @prop {(e: MouseEvent) => number} [getClickedIndexFn]\r\n *\r\n * @prop {boolean} [arrowPrev]\r\n * @prop {boolean} [arrowNext]\r\n * @prop {boolean} [zoom]\r\n * @prop {boolean} [close]\r\n * @prop {boolean} [counter]\r\n *\r\n * @prop {string} [arrowPrevSVG]\r\n * @prop {string} [arrowNextSVG]\r\n * @prop {string} [zoomSVG]\r\n * @prop {string} [closeSVG]\r\n * @prop {string} [counterSVG]\r\n *\r\n * @prop {string} [arrowPrevTitle]\r\n * @prop {string} [arrowNextTitle]\r\n * @prop {string} [zoomTitle]\r\n * @prop {string} [closeTitle]\r\n * @prop {string} [counterTitle]\r\n *\r\n * @prop {ZoomLevelOption} [initialZoomLevel]\r\n * @prop {ZoomLevelOption} [secondaryZoomLevel]\r\n * @prop {ZoomLevelOption} [maxZoomLevel]\r\n *\r\n * @prop {boolean} [mouseMovePan]\r\n * @prop {Point | null} [initialPointerPos]\r\n * @prop {boolean} [showHideOpacity]\r\n *\r\n * @prop {PhotoSwipeModuleOption} [pswpModule]\r\n * @prop {() => Promise<any>} [openPromise]\r\n * @prop {boolean} [preloadFirstSlide]\r\n * @prop {ElementProvider} [gallery]\r\n * @prop {string} [gallerySelector]\r\n * @prop {ElementProvider} [children]\r\n * @prop {string} [childSelector]\r\n * @prop {string | false} [thumbSelector]\r\n */\n\n/** @type {PreparedPhotoSwipeOptions} */\n\nconst defaultOptions = {\n  allowPanToNext: true,\n  spacing: 0.1,\n  loop: true,\n  pinchToClose: true,\n  closeOnVerticalDrag: true,\n  hideAnimationDuration: 333,\n  showAnimationDuration: 333,\n  zoomAnimationDuration: 333,\n  escKey: true,\n  arrowKeys: true,\n  trapFocus: true,\n  returnFocus: true,\n  maxWidthToAnimate: 4000,\n  clickToCloseNonZoomable: true,\n  imageClickAction: 'zoom-or-close',\n  bgClickAction: 'close',\n  tapAction: 'toggle-controls',\n  doubleTapAction: 'zoom',\n  indexIndicatorSep: ' / ',\n  preloaderDelay: 2000,\n  bgOpacity: 0.8,\n  index: 0,\n  errorMsg: 'The image cannot be loaded',\n  preload: [1, 2],\n  easing: 'cubic-bezier(.4,0,.22,1)'\n};\n/**\r\n * PhotoSwipe Core\r\n */\n\nclass PhotoSwipe extends PhotoSwipeBase {\n  /**\r\n   * @param {PhotoSwipeOptions} [options]\r\n   */\n  constructor(options) {\n    super();\n    this.options = this._prepareOptions(options || {});\n    /**\r\n     * offset of viewport relative to document\r\n     *\r\n     * @type {Point}\r\n     */\n\n    this.offset = {\n      x: 0,\n      y: 0\n    };\n    /**\r\n     * @type {Point}\r\n     * @private\r\n     */\n\n    this._prevViewportSize = {\n      x: 0,\n      y: 0\n    };\n    /**\r\n     * Size of scrollable PhotoSwipe viewport\r\n     *\r\n     * @type {Point}\r\n     */\n\n    this.viewportSize = {\n      x: 0,\n      y: 0\n    };\n    /**\r\n     * background (backdrop) opacity\r\n     */\n\n    this.bgOpacity = 1;\n    this.currIndex = 0;\n    this.potentialIndex = 0;\n    this.isOpen = false;\n    this.isDestroying = false;\n    this.hasMouse = false;\n    /**\r\n     * @private\r\n     * @type {SlideData}\r\n     */\n\n    this._initialItemData = {};\n    /** @type {Bounds | undefined} */\n\n    this._initialThumbBounds = undefined;\n    /** @type {HTMLDivElement | undefined} */\n\n    this.topBar = undefined;\n    /** @type {HTMLDivElement | undefined} */\n\n    this.element = undefined;\n    /** @type {HTMLDivElement | undefined} */\n\n    this.template = undefined;\n    /** @type {HTMLDivElement | undefined} */\n\n    this.container = undefined;\n    /** @type {HTMLElement | undefined} */\n\n    this.scrollWrap = undefined;\n    /** @type {Slide | undefined} */\n\n    this.currSlide = undefined;\n    this.events = new DOMEvents();\n    this.animations = new Animations();\n    this.mainScroll = new MainScroll(this);\n    this.gestures = new Gestures(this);\n    this.opener = new Opener(this);\n    this.keyboard = new Keyboard(this);\n    this.contentLoader = new ContentLoader(this);\n  }\n  /** @returns {boolean} */\n\n\n  init() {\n    if (this.isOpen || this.isDestroying) {\n      return false;\n    }\n\n    this.isOpen = true;\n    this.dispatch('init'); // legacy\n\n    this.dispatch('beforeOpen');\n\n    this._createMainStructure(); // add classes to the root element of PhotoSwipe\n\n\n    let rootClasses = 'pswp--open';\n\n    if (this.gestures.supportsTouch) {\n      rootClasses += ' pswp--touch';\n    }\n\n    if (this.options.mainClass) {\n      rootClasses += ' ' + this.options.mainClass;\n    }\n\n    if (this.element) {\n      this.element.className += ' ' + rootClasses;\n    }\n\n    this.currIndex = this.options.index || 0;\n    this.potentialIndex = this.currIndex;\n    this.dispatch('firstUpdate'); // starting index can be modified here\n    // initialize scroll wheel handler to block the scroll\n\n    this.scrollWheel = new ScrollWheel(this); // sanitize index\n\n    if (Number.isNaN(this.currIndex) || this.currIndex < 0 || this.currIndex >= this.getNumItems()) {\n      this.currIndex = 0;\n    }\n\n    if (!this.gestures.supportsTouch) {\n      // enable mouse features if no touch support detected\n      this.mouseDetected();\n    } // causes forced synchronous layout\n\n\n    this.updateSize();\n    this.offset.y = window.pageYOffset;\n    this._initialItemData = this.getItemData(this.currIndex);\n    this.dispatch('gettingData', {\n      index: this.currIndex,\n      data: this._initialItemData,\n      slide: undefined\n    }); // *Layout* - calculate size and position of elements here\n\n    this._initialThumbBounds = this.getThumbBounds();\n    this.dispatch('initialLayout');\n    this.on('openingAnimationEnd', () => {\n      const {\n        itemHolders\n      } = this.mainScroll; // Add content to the previous and next slide\n\n      if (itemHolders[0]) {\n        itemHolders[0].el.style.display = 'block';\n        this.setContent(itemHolders[0], this.currIndex - 1);\n      }\n\n      if (itemHolders[2]) {\n        itemHolders[2].el.style.display = 'block';\n        this.setContent(itemHolders[2], this.currIndex + 1);\n      }\n\n      this.appendHeavy();\n      this.contentLoader.updateLazy();\n      this.events.add(window, 'resize', this._handlePageResize.bind(this));\n      this.events.add(window, 'scroll', this._updatePageScrollOffset.bind(this));\n      this.dispatch('bindEvents');\n    }); // set content for center slide (first time)\n\n    if (this.mainScroll.itemHolders[1]) {\n      this.setContent(this.mainScroll.itemHolders[1], this.currIndex);\n    }\n\n    this.dispatch('change');\n    this.opener.open();\n    this.dispatch('afterInit');\n    return true;\n  }\n  /**\r\n   * Get looped slide index\r\n   * (for example, -1 will return the last slide)\r\n   *\r\n   * @param {number} index\r\n   * @returns {number}\r\n   */\n\n\n  getLoopedIndex(index) {\n    const numSlides = this.getNumItems();\n\n    if (this.options.loop) {\n      if (index > numSlides - 1) {\n        index -= numSlides;\n      }\n\n      if (index < 0) {\n        index += numSlides;\n      }\n    }\n\n    return clamp(index, 0, numSlides - 1);\n  }\n\n  appendHeavy() {\n    this.mainScroll.itemHolders.forEach(itemHolder => {\n      var _itemHolder$slide;\n\n      (_itemHolder$slide = itemHolder.slide) === null || _itemHolder$slide === void 0 || _itemHolder$slide.appendHeavy();\n    });\n  }\n  /**\r\n   * Change the slide\r\n   * @param {number} index New index\r\n   */\n\n\n  goTo(index) {\n    this.mainScroll.moveIndexBy(this.getLoopedIndex(index) - this.potentialIndex);\n  }\n  /**\r\n   * Go to the next slide.\r\n   */\n\n\n  next() {\n    this.goTo(this.potentialIndex + 1);\n  }\n  /**\r\n   * Go to the previous slide.\r\n   */\n\n\n  prev() {\n    this.goTo(this.potentialIndex - 1);\n  }\n  /**\r\n   * @see slide/slide.js zoomTo\r\n   *\r\n   * @param {Parameters<Slide['zoomTo']>} args\r\n   */\n\n\n  zoomTo(...args) {\n    var _this$currSlide;\n\n    (_this$currSlide = this.currSlide) === null || _this$currSlide === void 0 || _this$currSlide.zoomTo(...args);\n  }\n  /**\r\n   * @see slide/slide.js toggleZoom\r\n   */\n\n\n  toggleZoom() {\n    var _this$currSlide2;\n\n    (_this$currSlide2 = this.currSlide) === null || _this$currSlide2 === void 0 || _this$currSlide2.toggleZoom();\n  }\n  /**\r\n   * Close the gallery.\r\n   * After closing transition ends - destroy it\r\n   */\n\n\n  close() {\n    if (!this.opener.isOpen || this.isDestroying) {\n      return;\n    }\n\n    this.isDestroying = true;\n    this.dispatch('close');\n    this.events.removeAll();\n    this.opener.close();\n  }\n  /**\r\n   * Destroys the gallery:\r\n   * - instantly closes the gallery\r\n   * - unbinds events,\r\n   * - cleans intervals and timeouts\r\n   * - removes elements from DOM\r\n   */\n\n\n  destroy() {\n    var _this$element;\n\n    if (!this.isDestroying) {\n      this.options.showHideAnimationType = 'none';\n      this.close();\n      return;\n    }\n\n    this.dispatch('destroy');\n    this._listeners = {};\n\n    if (this.scrollWrap) {\n      this.scrollWrap.ontouchmove = null;\n      this.scrollWrap.ontouchend = null;\n    }\n\n    (_this$element = this.element) === null || _this$element === void 0 || _this$element.remove();\n    this.mainScroll.itemHolders.forEach(itemHolder => {\n      var _itemHolder$slide2;\n\n      (_itemHolder$slide2 = itemHolder.slide) === null || _itemHolder$slide2 === void 0 || _itemHolder$slide2.destroy();\n    });\n    this.contentLoader.destroy();\n    this.events.removeAll();\n  }\n  /**\r\n   * Refresh/reload content of a slide by its index\r\n   *\r\n   * @param {number} slideIndex\r\n   */\n\n\n  refreshSlideContent(slideIndex) {\n    this.contentLoader.removeByIndex(slideIndex);\n    this.mainScroll.itemHolders.forEach((itemHolder, i) => {\n      var _this$currSlide$index, _this$currSlide3;\n\n      let potentialHolderIndex = ((_this$currSlide$index = (_this$currSlide3 = this.currSlide) === null || _this$currSlide3 === void 0 ? void 0 : _this$currSlide3.index) !== null && _this$currSlide$index !== void 0 ? _this$currSlide$index : 0) - 1 + i;\n\n      if (this.canLoop()) {\n        potentialHolderIndex = this.getLoopedIndex(potentialHolderIndex);\n      }\n\n      if (potentialHolderIndex === slideIndex) {\n        // set the new slide content\n        this.setContent(itemHolder, slideIndex, true); // activate the new slide if it's current\n\n        if (i === 1) {\n          var _itemHolder$slide3;\n\n          this.currSlide = itemHolder.slide;\n          (_itemHolder$slide3 = itemHolder.slide) === null || _itemHolder$slide3 === void 0 || _itemHolder$slide3.setIsActive(true);\n        }\n      }\n    });\n    this.dispatch('change');\n  }\n  /**\r\n   * Set slide content\r\n   *\r\n   * @param {ItemHolder} holder mainScroll.itemHolders array item\r\n   * @param {number} index Slide index\r\n   * @param {boolean} [force] If content should be set even if index wasn't changed\r\n   */\n\n\n  setContent(holder, index, force) {\n    if (this.canLoop()) {\n      index = this.getLoopedIndex(index);\n    }\n\n    if (holder.slide) {\n      if (holder.slide.index === index && !force) {\n        // exit if holder already contains this slide\n        // this could be common when just three slides are used\n        return;\n      } // destroy previous slide\n\n\n      holder.slide.destroy();\n      holder.slide = undefined;\n    } // exit if no loop and index is out of bounds\n\n\n    if (!this.canLoop() && (index < 0 || index >= this.getNumItems())) {\n      return;\n    }\n\n    const itemData = this.getItemData(index);\n    holder.slide = new Slide(itemData, index, this); // set current slide\n\n    if (index === this.currIndex) {\n      this.currSlide = holder.slide;\n    }\n\n    holder.slide.append(holder.el);\n  }\n  /** @returns {Point} */\n\n\n  getViewportCenterPoint() {\n    return {\n      x: this.viewportSize.x / 2,\n      y: this.viewportSize.y / 2\n    };\n  }\n  /**\r\n   * Update size of all elements.\r\n   * Executed on init and on page resize.\r\n   *\r\n   * @param {boolean} [force] Update size even if size of viewport was not changed.\r\n   */\n\n\n  updateSize(force) {\n    // let item;\n    // let itemIndex;\n    if (this.isDestroying) {\n      // exit if PhotoSwipe is closed or closing\n      // (to avoid errors, as resize event might be delayed)\n      return;\n    } //const newWidth = this.scrollWrap.clientWidth;\n    //const newHeight = this.scrollWrap.clientHeight;\n\n\n    const newViewportSize = getViewportSize(this.options, this);\n\n    if (!force && pointsEqual(newViewportSize, this._prevViewportSize)) {\n      // Exit if dimensions were not changed\n      return;\n    } //this._prevViewportSize.x = newWidth;\n    //this._prevViewportSize.y = newHeight;\n\n\n    equalizePoints(this._prevViewportSize, newViewportSize);\n    this.dispatch('beforeResize');\n    equalizePoints(this.viewportSize, this._prevViewportSize);\n\n    this._updatePageScrollOffset();\n\n    this.dispatch('viewportSize'); // Resize slides only after opener animation is finished\n    // and don't re-calculate size on inital size update\n\n    this.mainScroll.resize(this.opener.isOpen);\n\n    if (!this.hasMouse && window.matchMedia('(any-hover: hover)').matches) {\n      this.mouseDetected();\n    }\n\n    this.dispatch('resize');\n  }\n  /**\r\n   * @param {number} opacity\r\n   */\n\n\n  applyBgOpacity(opacity) {\n    this.bgOpacity = Math.max(opacity, 0);\n\n    if (this.bg) {\n      this.bg.style.opacity = String(this.bgOpacity * this.options.bgOpacity);\n    }\n  }\n  /**\r\n   * Whether mouse is detected\r\n   */\n\n\n  mouseDetected() {\n    if (!this.hasMouse) {\n      var _this$element2;\n\n      this.hasMouse = true;\n      (_this$element2 = this.element) === null || _this$element2 === void 0 || _this$element2.classList.add('pswp--has_mouse');\n    }\n  }\n  /**\r\n   * Page resize event handler\r\n   *\r\n   * @private\r\n   */\n\n\n  _handlePageResize() {\n    this.updateSize(); // In iOS webview, if element size depends on document size,\n    // it'll be measured incorrectly in resize event\n    //\n    // https://bugs.webkit.org/show_bug.cgi?id=170595\n    // https://hackernoon.com/onresize-event-broken-in-mobile-safari-d8469027bf4d\n\n    if (/iPhone|iPad|iPod/i.test(window.navigator.userAgent)) {\n      setTimeout(() => {\n        this.updateSize();\n      }, 500);\n    }\n  }\n  /**\r\n   * Page scroll offset is used\r\n   * to get correct coordinates\r\n   * relative to PhotoSwipe viewport.\r\n   *\r\n   * @private\r\n   */\n\n\n  _updatePageScrollOffset() {\n    this.setScrollOffset(0, window.pageYOffset);\n  }\n  /**\r\n   * @param {number} x\r\n   * @param {number} y\r\n   */\n\n\n  setScrollOffset(x, y) {\n    this.offset.x = x;\n    this.offset.y = y;\n    this.dispatch('updateScrollOffset');\n  }\n  /**\r\n   * Create main HTML structure of PhotoSwipe,\r\n   * and add it to DOM\r\n   *\r\n   * @private\r\n   */\n\n\n  _createMainStructure() {\n    // root DOM element of PhotoSwipe (.pswp)\n    this.element = createElement('pswp', 'div');\n    this.element.setAttribute('tabindex', '-1');\n    this.element.setAttribute('role', 'dialog'); // template is legacy prop\n\n    this.template = this.element; // Background is added as a separate element,\n    // as animating opacity is faster than animating rgba()\n\n    this.bg = createElement('pswp__bg', 'div', this.element);\n    this.scrollWrap = createElement('pswp__scroll-wrap', 'section', this.element);\n    this.container = createElement('pswp__container', 'div', this.scrollWrap); // aria pattern: carousel\n\n    this.scrollWrap.setAttribute('aria-roledescription', 'carousel');\n    this.container.setAttribute('aria-live', 'off');\n    this.container.setAttribute('id', 'pswp__items');\n    this.mainScroll.appendHolders();\n    this.ui = new UI(this);\n    this.ui.init(); // append to DOM\n\n    (this.options.appendToEl || document.body).appendChild(this.element);\n  }\n  /**\r\n   * Get position and dimensions of small thumbnail\r\n   *   {x:,y:,w:}\r\n   *\r\n   * Height is optional (calculated based on the large image)\r\n   *\r\n   * @returns {Bounds | undefined}\r\n   */\n\n\n  getThumbBounds() {\n    return getThumbBounds(this.currIndex, this.currSlide ? this.currSlide.data : this._initialItemData, this);\n  }\n  /**\r\n   * If the PhotoSwipe can have continuous loop\r\n   * @returns Boolean\r\n   */\n\n\n  canLoop() {\n    return this.options.loop && this.getNumItems() > 2;\n  }\n  /**\r\n   * @private\r\n   * @param {PhotoSwipeOptions} options\r\n   * @returns {PreparedPhotoSwipeOptions}\r\n   */\n\n\n  _prepareOptions(options) {\n    if (window.matchMedia('(prefers-reduced-motion), (update: slow)').matches) {\n      options.showHideAnimationType = 'none';\n      options.zoomAnimationDuration = 0;\n    }\n    /** @type {PreparedPhotoSwipeOptions} */\n\n\n    return { ...defaultOptions,\n      ...options\n    };\n  }\n\n}\n\nexport { PhotoSwipe as default };\n//# sourceMappingURL=photoswipe.esm.js.map\n"],"names":["createElement","className","tagName","appendToEl","el","document","appendChild","equalizePoints","p1","p2","x","y","undefined","id","roundPoint","p","Math","round","getDistanceBetween","abs","sqrt","pointsEqual","clamp","val","min","max","toTransformString","scale","propValue","setTransform","style","transform","defaultCSSEasing","setTransitionStyle","prop","duration","ease","transition","setWidthHeight","w","h","width","height","removeTransitionStyle","decodeImage","img","decode","catch","complete","Promise","resolve","reject","onload","onerror","LOAD_STATE","IDLE","LOADING","LOADED","ERROR","specialKeyUsed","e","button","ctrlKey","metaKey","altKey","shiftKey","getElementsFromOption","option","legacySelector","parent","elements","Element","NodeList","Array","isArray","from","selector","querySelectorAll","isSafari","navigator","vendor","match","supportsPassive","window","addEventListener","Object","defineProperty","get","DOMEvents","constructor","this","_pool","add","target","type","listener","passive","_toggleListener","remove","removeAll","forEach","poolItem","unbind","skipPool","methodName","types","split","eType","filter","push","eventOptions","getViewportSize","options","pswp","getViewportSizeFn","newViewportSize","documentElement","clientWidth","innerHeight","parsePaddingOption","viewportSize","itemData","index","paddingValue","paddingFn","padding","legacyPropName","toUpperCase","slice","Number","getPanAreaSize","PanBounds","slide","currZoomLevel","center","update","_updateAxis","dispatch","reset","axis","elSize","paddingProp","data","panAreaSize","correctPan","panOffset","MAX_IMAGE_WIDTH","ZoomLevel","elementSize","fit","fill","vFill","initial","secondary","maxWidth","maxHeight","hRatio","vRatio","_getInitial","_getSecondary","_getMax","zoomLevels","slideData","_parseZoomLevelOption","optionPrefix","optionName","optionValue","Slide","isActive","currIndex","currentResolution","pan","isFirstSlide","opener","isOpen","content","contentLoader","getContentBySlide","container","holderElement","heavyAppended","bounds","prevDisplayedWidth","prevDisplayedHeight","setIsActive","activate","deactivate","append","transformOrigin","calculateSize","load","updateContentSize","appendHeavy","zoomAndPanToInitial","applyCurrentZoomPan","appendHeavyNearby","mainScroll","isShifted","defaultPrevented","destroy","hasSlide","resize","panTo","force","scaleMultiplier","sizeChanged","setDisplayedSize","getPlaceholderElement","_this$content$placeho","placeholder","element","zoomTo","destZoomLevel","centerPoint","transitionDuration","ignoreBounds","isZoomable","animations","stopAllPan","prevZoomLevel","setZoomLevel","calculateZoomToPanOffset","finishTransition","_setResolution","startTransition","isPan","name","getCurrentTransform","onComplete","easing","toggleZoom","zoomAnimationDuration","point","totalPanDistance","getViewportCenterPoint","zoomFactor","panX","panY","isPannable","Boolean","_applyZoomTransform","currSlide","zoom","newResolution","PAN_END_FRICTION","VERTICAL_DRAG_FRICTION","MIN_RATIO_TO_CLOSE","MIN_NEXT_SLIDE_SPEED","project","initialVelocity","decelerationRate","DragHandler","gestures","startPan","start","stopAll","change","prevP1","dragAxis","closeOnVerticalDrag","isMultitouch","_setPanWithFriction","bgOpacity","_getVerticalDragRatio","applyBgOpacity","mainScrollChanged","_panOrMoveMainScroll","end","velocity","indexDiff","mainScrollShiftDiff","getCurrSlideX","currentSlideVisibilityRatio","moveIndexBy","correctZoomPan","_finishPanGestureForAxis","panPos","restoreBgOpacity","projectedPosition","vDragRatio","projectedVDragRatio","close","correctedPanPosition","dampingRatio","initialBgOpacity","totalPanDist","startSpring","onUpdate","pos","animationProgressRatio","floor","delta","newMainScrollX","moveTo","newPan","allowPanToNext","currSlideMainScrollX","isLeftToRight","isRightToLeft","wasAtMinPanPosition","wasAtMaxPanPosition","_this$pswp$currSlide$","_this$pswp$currSlide","potentialPan","customFriction","correctedPan","UPPER_ZOOM_FRICTION","LOWER_ZOOM_FRICTION","getZoomPointsCenter","ZoomHandler","_startPan","_startZoomPoint","_zoomPoint","_wasOverFitZoomLevel","_startZoomLevel","startP1","startP2","minZoomLevel","maxZoomLevel","pinchToClose","_calculatePanForZoomLevel","ignoreGesture","destinationZoomLevel","currZoomLevelNeedsChange","initialPan","destinationPan","panNeedsChange","naturalFrequency","now","newZoomLevel","didTapOnMainContent","event","closest","TapHandler","click","originalEvent","targetClassList","classList","isImageClick","contains","isBackgroundClick","_doClickOrTapAction","tap","doubleTap","actionName","_this$gestures$pswp$e","actionFullName","clickToCloseNonZoomable","toggle","call","AXIS_SWIPE_HYSTERISIS","DOUBLE_TAP_DELAY","MIN_TAP_DISTANCE","Gestures","prevP2","_lastStartP1","_intervalP1","_numActivePoints","_ongoingPointers","_touchEventEnabled","_pointerEventEnabled","PointerEvent","supportsTouch","maxTouchPoints","_intervalTime","_velocityCalculated","isDragging","isZooming","raf","_tapTimer","drag","tapHandler","on","events","scrollWrap","_onClick","bind","_bindEvents","ontouchmove","ontouchend","pref","down","up","cancel","cancelEvent","onPointerDown","onPointerMove","onPointerUp","isMousePointer","pointerType","mouseDetected","_preventPointerEventBehaviour","_updatePoints","_clearTapTimer","preventDefault","_finishDrag","_updateStartPoints","_rafStopLoop","_rafRenderLoop","_calculateDragDirection","Date","_updateVelocity","_finishTap","_updatePrevPoints","requestAnimationFrame","time","_getVelocity","indexOf","tapDelay","doubleTapAction","setTimeout","clearTimeout","displacement","cancelAnimationFrame","preventPointerEvent","applyFilters","pointerEvent","pointerIndex","findIndex","ongoingPointer","pointerId","splice","_convertEventPosToPoint","length","touchEvent","touches","diff","axisToCheck","pageX","offset","pageY","identifier","stopPropagation","MAIN_SCROLL_END_FRICTION","MainScroll","slideWidth","_currPositionIndex","_prevPositionIndex","_containerShiftIndex","itemHolders","resizeSlides","newSlideWidth","spacing","slideWidthChanged","itemHolder","resetPosition","appendHolders","i","setAttribute","display","canBeSwiped","getNumItems","animate","velocityX","newIndex","potentialIndex","numSlides","canLoop","getLoopedIndex","distance","stopMainScroll","destinationX","isMainScroll","updateCurrItem","currDiff","currDistance","_this$itemHolders$","positionDifference","tempHolder","diffAbs","_itemHolder$slide","shift","setContent","pop","unshift","updateLazy","dragging","newSlideIndexOffset","KeyboardKeyCodesMap","Escape","z","ArrowLeft","ArrowUp","ArrowRight","ArrowDown","Tab","getKeyboardEventKey","key","isKeySupported","Keyboard","_wasFocused","trapFocus","initialPointerPos","_focusRoot","_onFocusIn","_onKeyDown","lastActiveElement","activeElement","returnFocus","focus","keydownAction","isForward","keyCode","escKey","arrowKeys","template","DEFAULT_EASING","CSSAnimation","props","_props$prop","onFinish","_target","_onComplete","_finished","_onTransitionEnd","_helperTimeout","_finalizeAnimation","removeEventListener","DEFAULT_NATURAL_FREQUENCY","DEFAULT_DAMPING_RATIO","SpringEaser","_dampingRatio","_naturalFrequency","_dampedFrequency","easeFrame","deltaPosition","deltaTime","coeff","naturalDumpingPow","E","dumpedFCos","cos","dumpedFSin","sin","SpringAnimation","_raf","easer","prevTime","animationLoop","Animations","activeAnimations","_start","isSpring","animation","stop","isPanRunning","some","ScrollWheel","_onWheel","deltaX","deltaY","wheelToZoom","deltaMode","clientX","clientY","addElementHTML","htmlData","isCustomSVG","svgData","out","join","size","outlineID","inner","UIElement","_container","elementHTML","html","isButton","toLowerCase","title","ariaLabel","ariaText","innerHTML","onInit","onClick","onclick","appendTo","topBar","initArrowButton","isNextButton","loop","disabled","arrowPrev","order","arrowNext","closeButton","zoomButton","loadingIndicator","indicatorElement","isVisible","delayTimeout","toggleIndicatorClass","setIndicatorVisibility","visible","updatePreloaderVisibility","_pswp$currSlide","isLoading","_pswp$currSlide2","preloaderDelay","ui","counterIndicator","counterElement","innerText","indexIndicatorSep","setZoomedIn","isZoomedIn","UI","isRegistered","uiElementsData","items","_lastUpdatedZoomLevel","init","sort","a","b","uiElementData","registerElement","_pswp$element","_onZoomPanUpdate","elementData","isClosing","currZoomLevelDiff","potentialZoomLevel","imageClickAction","getBoundsByElement","thumbAreaRect","getBoundingClientRect","left","top","getCroppedBoundsByElement","imageWidth","imageHeight","fillZoomLevel","offsetX","offsetY","innerRect","getThumbBounds","instance","thumbBounds","thumbnail","thumbSelector","matches","querySelector","thumbCropped","PhotoSwipeEvent","details","assign","Eventable","_listeners","_filters","addFilter","fn","priority","_this$_filters$name","_this$_filters$name2","_this$pswp","f1","f2","removeFilter","args","_this$_filters$name3","apply","_this$_listeners$name","_this$pswp2","off","_this$pswp3","_this$_listeners$name2","Placeholder","imageSrc","imgEl","decoding","alt","src","_this$element","parentNode","Content","displayedImageWidth","displayedImageHeight","isAttached","isDecoding","state","removePlaceholder","keepPlaceholder","isLazy","reload","usePlaceholder","placeholderEl","parentElement","prepend","placeholderSrc","msrc","isImageContent","loadImage","_this$data$src","_this$data$alt","imageElement","updateSrcsetSizes","srcset","onLoaded","onError","setSlide","displayError","isError","isInitialSizeUpdate","image","sizesWidth","dataset","largestUsedSize","parseInt","sizes","String","lazyLoad","_this$instance$option","_this$instance$option2","errorMsgEl","errorMsg","supportsDecode","finally","appendImage","MIN_SLIDES_TO_CACHE","lazyLoadData","createContentFromData","zoomLevel","ceil","lazyLoadSlide","getItemData","ContentLoader","limit","preload","_cachedItems","loadSlideByIndex","initialIndex","getContentByIndex","addToCache","removeByIndex","indexToRemove","item","removedItem","find","PhotoSwipeBase","_this$options","numItems","dataSource","_getGalleryDOMElements","gallery","_this$options2","dataSourceItem","_domElementToItemData","galleryElement","_this$options3","_this$options4","children","childSelector","linkEl","pswpSrc","href","pswpSrcset","pswpWidth","pswpHeight","pswpType","thumbnailEl","_thumbnailEl$getAttri","currentSrc","getAttribute","pswpCropped","cropped","MIN_OPACITY","Opener","isClosed","isOpening","_duration","_useAnimation","_croppedZoom","_animateRootOpacity","_animateBgOpacity","_placeholder","_opacityElement","_cropContainer1","_cropContainer2","_thumbBounds","_prepareOpen","open","hideAnimationDuration","maxWidthToAnimate","_applyStartProps","showAnimationDuration","_options$showHideOpac","showHideAnimationType","showHideOpacity","_initialThumbBounds","_animateZoom","bg","opacity","overflow","_setClosedStateZoomPan","willChange","decoded","isDelaying","_initiate","_this$pswp$element","_this$pswp$element2","setProperty","_animateToOpenState","_animateToClosedState","_onAnimationComplete","_animateTo","containerOnePanX","containerOnePanY","containerTwoPanX","containerTwoPanY","animProps","defaultOptions","bgClickAction","tapAction","PhotoSwipe","super","_prepareOptions","_prevViewportSize","isDestroying","hasMouse","_initialItemData","keyboard","_createMainStructure","rootClasses","mainClass","scrollWheel","isNaN","updateSize","pageYOffset","_handlePageResize","_updatePageScrollOffset","goTo","next","prev","_this$currSlide","_this$currSlide2","_itemHolder$slide2","refreshSlideContent","slideIndex","_this$currSlide$index","_this$currSlide3","potentialHolderIndex","_itemHolder$slide3","holder","matchMedia","_this$element2","test","userAgent","setScrollOffset","body"],"sourceRoot":""}